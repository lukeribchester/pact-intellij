{
  parserClass="io.kadena.pact.language.parser.PactParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pact"
  psiImplClassSuffix="Impl"
  psiPackage="io.kadena.pact.language.psi"
  psiImplPackage="io.kadena.pact.language.psi.impl"

  elementTypeHolderClass="io.kadena.pact.language.psi.PactTypes"
  elementTypeClass="io.kadena.pact.language.psi.PactElementType"
  tokenTypeClass="io.kadena.pact.language.psi.PactTokenType"

  tokens = [
    // Lexer.x
    STR="regexp:(\"([^\"\\]|\\\"|\\)*\")"
    NUM="regexp:[0-9]"
    COMMENT="regexp:(;.*\n*)"

    // Keywords
    DEFUN_KEYWORD="defun"
    DEF_CAP_KEYWORD="defcap"
    DEF_CONST_KEYWORD="defconst"
    DEF_SCHEMA_KEYWORD="defschema"
    DEF_TABLE_KEYWORD="deftable"
    DEF_PACT_KEYWORD="defpact"
    IMPORT_KEYWORD="use"
    MODULE_KEYWORD="module"
    IMPLEMENTS_KEYWORD="implements"
    INTERFACE_KEYWORD="interface"
    BLESS_KEYWORD="bless"
    LET_KEYWORD="regexp:(let\*|let)"
    LAMBDA_KEYWORD="lambda"


    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    AND_KEYWORD="and"
    OR_KEYWORD="or"

    IF_KEYWORD="if"
    LOAD_KEYWORD="load"
    DOC_ANN_KEYWORD="@doc"
    MODEL_ANN_KEYWORD="@model"
    EVENT_ANN_KEYWORD="@event"
    MANAGED_ANN_KEYWORD="@managed"
    STEP_KEYWORD="step"
    STEP_WITH_ROLLBACK_KEYWORD="step-with-rollback"
    ENFORCE_KEYWORD="enforce"
    ENFORCE_ONE_KEYWORD="enforce-one"
    WITH_CAPABILITY_KEYWORD="with-capability"
    CREATE_USER_GUARD_KEYWORD="create-user-guard"
    TRY_KEYWORD="try"
    BLOCK_INTRO_KEYWORD="progn"
    SUSPEND_KEYWORD="suspend"

    TICK="regexp:'[a-zA-Z][a-zA-Z0-9\-_]*"
    OPEN_PARENS="("
    CLOSE_PARENS=")"
    OPEN_BRACE="{"
    CLOSE_BRACE="}"
    OPEN_BRACKET="["
    CLOSE_BRACKET="]"
    COMMA=","
    DOT="."
    BIND_ASSIGN=":="
    DYN_ACC="::"
    COLON=":"

    // Parser.y

    // Numerical operators
    //   ADD="+"
    //   SUB="-"
    //   MULT="*"
    //   DIV="/"
    //   CARET="^"
    //   LOG="log"
    //   SQRT="sqrt"
    //   LN="ln"
    //   EXP="exp"
    //   ABS="abs"
    //   ROUND="round"
    //   CEILING="ceiling"
    //   FLOOR="floor"
    //   MOD="mod"

    // Bitwise operators
    //   AMP="&"
    //   PIPE="|"
    //   XOR="xor"
    //   SHIFT="shift"
    //   TILDE="~"

    // Logical operators
    //   GT=">"
    //   LT="<"
    //   GE=">="
    //   LE="<="
    //   EQ="="
    //   EXCL_EQ="!="
    //   AND="and"
    //   AND_APP="and?"
    //   OR="or"
    //   OR_APP="or?"
    //   NOT="not"
    //   NOT_APP="not?"
    //   WHEN="when"

    IDENT="regexp:[a-zA-Z%#+\-_&$@<>=^?*!|/~][a-zA-Z0-9%#+\-_&$@<>=^?*!|/~]*"

    // Reference
    CRLF="regexp:\R"
    WhiteSpace="regexp:[ \n\t\f]"
  ]
}

Program ::= !<<eof>> ReplProgramList | !<<eof>> ProgramList

ProgramList ::= TopLevel+

ReplProgramList ::= ReplTopLevel+

private TopLevel ::= Module
                   | Interface
                   | Expr
                   | Use { pin=1 }

private ReplTopLevel ::= "(" ReplSpecial ")"
                       | "(" Defun ")"
                       | "(" DefConst ")"
                       | TopLevel { pin=1 }

ReplSpecial ::= "load" STR BOOLEAN
              | "load" STR

private Governance ::= StringRaw
                     | IDENT
// TODO: Handle single character identifiers:
// TODO: Separate operators from IDENT
// https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/db.repl
StringRaw ::= STR
            | TICK

Module ::= "(" "module" IDENT Governance [MDocOrModel] ExtOrDefs ")" { pin=7 }

Interface ::= "(" "interface" IDENT [MDocOrModel] ImportOrIfDef ")" { pin=6 }

Ext ::= Use
        | "(" "implements" ModQual ")"
        | "(" "bless" StringRaw ")"

Use ::= "(" "use" ModQual STR? ImportList? ")"
        | "(" "import" ModQual STR? ImportList? ")"

private ExtOrDefs ::= (Def | Ext)+

private Def ::= Defun
              | DefConst
              | Defcap
              | Defschema
              | Deftable
              | DefPact

ImportOrIfDef ::= (IfDef | Use)+

private IfDef ::= IfDefun
                | DefConst
                | IfDefCap
                | Defschema
                | IfDefPact

IfDefun   ::= "(" "defun" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel] ")" { pin=9 }
IfDefCap  ::= "(" "defcap" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel] [MDCapMeta] ")" { pin=10 }
IfDefPact ::= "(" "defpact" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel] ")" { pin=9 }

ImportList ::= "[" ImportNames? "]"

ImportNames ::= IDENT+

Defun     ::= "(" "defun" IDENT [MTypeAnn] "(" [MArgs] ")" [MDocOrModel] Block ")" { pin=9 }
Defcap    ::= "(" "defcap" IDENT [MTypeAnn] "(" [MArgs] ")" [MDocOrModel] [MDCapMeta] Block ")" { pin=10 }
DefPact   ::= "(" "defpact" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel] Steps ")" { pin=9 }
DefConst  ::= "(" "defconst" IDENT [MTypeAnn] Expr [MDoc] ")" { pin=2 }
Defschema ::= "(" "defschema" IDENT [MDocOrModel] SchemaArgList ")" { pin=2 }
Deftable  ::= "(" "deftable" IDENT ":" "{" ParsedName "}" [MDoc] ")" { pin=2 }

Steps ::= Step+

Step ::= "(" "step" Expr [MModel] ")"
       | "(" "step" Expr Expr [MModel] ")"
       | "(" "step-with-rollback" Expr Expr [MModel] ")"
       | "(" "step-with-rollback" Expr Expr Expr [MModel] ")"

MDCapMeta ::= Managed
            | Event

Managed ::= "@managed" (IDENT ParsedName)*

Event ::= "@event"

MArgs ::= MArg*

MArg ::= IDENT ":" Type
       | IDENT

SchemaArgList ::= SchemaArg (SchemaArg) * // Verified

SchemaArg ::= IDENT (":" Type)?

Type ::= "[" Type "]"
       | "module" "{" ModuleNames "}"
       | IDENT "{" ParsedTyName "}"
       | IDENT

ModuleNames ::= ModQual ("," ModQual) *  // Verified

DocAnn ::= "@doc" STR

DocStr ::= STR

MModel ::= ModelAnn

ModelAnn ::= "@model" "[" PactFVModels "]"

private MDocOrModel ::= DocAnn ModelAnn
                      | ModelAnn DocAnn
                      | DocAnn
                      | ModelAnn
                      | DocStr

MDoc ::= DocAnn
       | DocStr

MTypeAnn ::= ":" Type

Block ::= BlockBody

BlockBody ::= Expr+

Expr ::= "(" SExpr ")"
       | Atom

private upper SExpr ::= LamExpr
                      | LetExpr
                      | IfExpr
                      | TryExpr
                      | ProgNExpr
                      | GenAppExpr
                      | SuspendExpr
                      | CapExpr

List ::= "[" [ListExprs] "]"

ListExprs ::= Expr MCommaExpr? // Check * ?

MCommaExpr ::= "," ExprCommaSep
             | AppList

ExprCommaSep ::= Expr ("," Expr) * // Verified

upper LamExpr ::= "lambda" "(" LamArgs ")" Block

// TODO: Fix if-statement syntax:
// https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/signatures.repl
upper IfExpr ::= "if" Expr Expr Expr

upper TryExpr ::= "try" Expr Expr

upper SuspendExpr ::= "suspend" Expr

upper CapExpr ::= CapForm

CapForm ::= "with-capability" Expr Block
          | "create-user-guard" "(" ParsedName AppList ")"

// TODO: Fix lambda syntax:
// https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/lambda.repl
LamArgs ::= LamArg (LamArg)* // Verified
LamArg ::= IDENT (":" Type)?


upper LetExpr ::= LET_KEYWORD "(" Binders ")" Block // Let

//Binders ::= Binder (Binder)* // Verified
//Binder ::= "(" IDENT [MTypeAnn] Expr ")" // Type annotation fault

//Binders ::= Binder+ // Verified
Binders ::= ("(" IDENT [MTypeAnn] Expr ")")+

upper GenAppExpr ::= Expr AppBindList // Check * ?

upper ProgNExpr ::= "progn" BlockBody

AppList ::= Expr* // Was +

AppBindList ::= (Expr | BindingForm)*

BindingForm ::= "{" BindPairs "}"

BindPair ::= STR ":=" MArg
           | TICK ":=" MArg

BindPairs ::= BindPair ("," BindPair)* // Verified

Atom ::= Var
       | Number
       | String
       | List
       | Bool
       | Operator
       | Object
       | "(" ")"

Operator ::= "and"
           | "or"
           | "enforce"
           | "enforce-one"

Bool ::= "true"
       | "false"

Var ::= IDENT "." ModQual
      | IDENT "::" IDENT
      | IDENT
// TODO: Fix unexpected '::'
// https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/nested-defpacts.repl
ParsedName ::= IDENT "." ModQual
             | IDENT "::" IDENT
             | IDENT

ParsedTyName ::= IDENT "." ModQual
               | IDENT

ModQual ::= IDENT "." IDENT
          | IDENT

Number ::= ["+" | "-"] NUM+ ["." NUM+]

String ::= STR
         | TICK

Object ::= "{" ObjectBody? "}"

ObjectBody ::= FieldPairs

FieldPair ::= STR ":" Expr
            | TICK ":" Expr

FieldPairs ::= FieldPair ("," FieldPair)* // Verified

PactFVModels ::= PropExprList

PropExprList ::= PropExpr* // Was +
// https://github.com/kadena-io/pact-5/blob/master/pact-tests/pact-tests/fv-syntax-regression.repl

PropExpr ::= PropAtom
           | "(" PropExprList ")"
           | "[" PropExprList "]"

PropAtom ::= FVVar
           | FVNumber
           | FVString
           | FVKeyword
           | FVDelim
           | FVBool

FVKeyword ::= "let"
            | "lambda"
            | "if"
            | "progn"
            | "suspend"
            | "try"
            | "enforce"
            | "enforce-one"
            | "and"
            | "or"
            | "create-user-guard"
            | "with-capability"

FVDelim ::= "{"
          | "}"
          | ":"
          | ","

FVBool ::= "true"
         | "false"

FVNumber ::= ["+" | "-"] NUM+ ["." NUM+]

FVString ::= STR
           | TICK

FVVar ::= IDENT "." ModQual
        | IDENT "::" IDENT
        | IDENT

// TODO: https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/yield.repl
