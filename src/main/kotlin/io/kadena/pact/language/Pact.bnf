{
  parserClass="io.kadena.pact.language.parser.PactParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pact"
  psiImplClassSuffix="Impl"
  psiPackage="io.kadena.pact.language.psi"
  psiImplPackage="io.kadena.pact.language.psi.impl"

  elementTypeHolderClass="io.kadena.pact.language.psi.PactTypes"
  elementTypeClass="io.kadena.pact.language.psi.PactElementType"
  tokenTypeClass="io.kadena.pact.language.psi.PactTokenType"

  tokens = [
    // Lexer.x
    STR="regexp:(\"([^\"\\]|\\\"|\\)*\")"
    //  NUM="regexp:([0-9])"
    NUM="regexp:[-+]?[0-9]*\.?[0-9]+"
    COMMENT="regexp:(;.*\n)"

    // Keywords
    DEFUN_KEYWORD="defun"
    DEF_CAP_KEYWORD="defcap"
    DEF_CONST_KEYWORD="defconst"
    DEF_SCHEMA_KEYWORD="defschema"
    DEF_TABLE_KEYWORD="deftable"
    DEF_PACT_KEYWORD="defpact"
    IMPORT_KEYWORD="use"
    MODULE_KEYWORD="module"
    IMPLEMENTS_KEYWORD="implements"
    INTERFACE_KEYWORD="interface"
    BLESS_KEYWORD="bless"
    LET_KEYWORD="regexp:([let*]|[let])"
    LAMBDA_KEYWORD="lambda"


    TRUE_KEYWORD="true"
    FALSE_KEYWORD="false"
    AND_KEYWORD="and"
    OR_KEYWORD="or"

    IF_KEYWORD="if"
    LOAD_KEYWORD="load"
    DOC_ANN_KEYWORD="@doc"
    MODEL_ANN_KEYWORD="@model"
    EVENT_ANN_KEYWORD="@event"
    MANAGED_ANN_KEYWORD="@managed"
    STEP_KEYWORD="step"
    STEP_WITH_ROLLBACK_KEYWORD="step-with-rollback"
    ENFORCE_KEYWORD="enforce"
    ENFORCE_ONE_KEYWORD="enforce-one"
    WITH_CAPABILITY_KEYWORD="with-capability"
    CREATE_USER_GUARD_KEYWORD="create-user-guard"
    TRY_KEYWORD="try"
    BLOCK_INTRO_KEYWORD="progn"
    SUSPEND_KEYWORD="suspend"

    TICK="'"
    OPEN_PARENS="("
    CLOSE_PARENS=")"
    OPEN_BRACE="{"
    CLOSE_BRACE="}"
    OPEN_BRACKET="["
    CLOSE_BRACKET="]"
    COMMA=","
    DOT="."
    BIND_ASSIGN=":="
    DYN_ACC="::"
    COLON=":"

    // Parser.y

    // Numerical operators
    //   ADD="+"
    //   SUB="-"
    //   MULT="*"
    //   DIV="/"
    //   CARET="^"
    //   LOG="log"
    //   SQRT="sqrt"
    //   LN="ln"
    //   EXP="exp"
    //   ABS="abs"
    //   ROUND="round"
    //   CEILING="ceiling"
    //   FLOOR="floor"
    //   MOD="mod"

    // Bitwise operators
    //   AMP="&"
    //   PIPE="|"
    //   XOR="xor"
    //   SHIFT="shift"
    //   TILDE="~"

    // Logical operators
    //   GT=">"
    //   LT="<"
    //   GE=">="
    //   LE="<="
    //   EQ="="
    //   EXCL_EQ="!="
    //   AND="and"
    //   AND_APP="and?"
    //   OR="or"
    //   OR_APP="or?"
    //   NOT="not"
    //   NOT_APP="not?"
    //   WHEN="when"

    IDENT="regexp:[a-zA-Z%#+\-_&$@<>=^?*!|/~][a-zA-Z0-9%#+\-_&$@<>=^?*!|/~]*"

    // Reference
    CRLF="regexp:\R"
    WhiteSpace="regexp:[ \n\t\f]"
  ]
}

<Program> ::= ProgramList | ReplProgramList

<ProgramList> ::= TopLevel+

<ReplProgramList> ::= RTL+

<TopLevel> ::= Module
             | Interface
             | Expr
             | Use

<RTL> ::= ReplTopLevel
        | "(" ReplSpecial ")"

<ReplTopLevel> ::= TopLevel
                 | "(" Defun ")"
                 | "(" DefConst ")"

<ReplSpecial> ::= "load" STR BOOLEAN
                 | "load" STR

<Governance> ::= StringRaw
               | IDENT

<StringRaw> ::= STR
              | TICK

<Module> ::= "(" "module" IDENT Governance [MDocOrModel] ExtOrDefs ")"

<Interface> ::= "(" "interface" IDENT [MDocOrModel] ImportOrIfDef ")"

<Ext> ::= Use
        | "(" "implements" ModQual ")"
        | "(" "bless" StringRaw ")"

<Use> ::= "(" "import" ModQual ImportList ")"
        | "(" "import" ModQual STR ImportList ")"

<ExtOrDefs> ::= (Def | Ext)+

<Def> ::= "(" Defun ")"
        | "(" DefConst ")"
        | "(" Defcap ")"
        | "(" Defschema ")"
        | "(" Deftable ")"
        | "(" DefPact ")"


<ImportOrIfDef> ::= (IfDef | Use)+


<IfDef> ::= "(" IfDefun ")"
          | "(" DefConst ")"
          | "(" IfDefCap ")"
          | "(" Defschema ")"
          | "(" IfDefPact ")"

<IfDefun> ::= "defun" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel]

<IfDefCap> ::= "defcap" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel] MDCapMeta

<IfDefPact> ::= "defpact" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel]

<ImportList> ::= "[" ImportNames "]"

<ImportNames> ::= IDENT+

<DefConst> ::= "defconst" IDENT [MTypeAnn] Expr [MDoc]

<Defun> ::= "defun" IDENT [MTypeAnn] "(" [MArgs] ")" [MDocOrModel] Block

<Defschema> ::= "defschema" IDENT [MDocOrModel] SchemaArgList

<Deftable> ::= "deftable" IDENT ":" "{" ParsedName "}" [MDoc]

<Defcap> ::= "defcap" IDENT [MTypeAnn] "(" [MArgs] ")" [MDocOrModel] [MDCapMeta] Block

<DefPact> ::= "defpact" IDENT [MTypeAnn] "(" MArgs ")" [MDocOrModel] Steps

<Steps> ::= Step+

<Step> ::= "(" "step" Expr [MModel] ")"
         | "(" "step" Expr Expr [MModel] ")"
         | "(" "step-with-rollback" Expr Expr [MModel] ")"
         | "(" "step-with-rollback" Expr Expr Expr [MModel] ")"

<MDCapMeta> ::= Managed
              | Event

<Managed> ::= "@managed"
            | "@managed" IDENT ParsedName

<Event> ::= "@event"

<MArgs> ::= MArg+

<MArg> ::= IDENT ":" Type
         | IDENT

<SchemaArgList> ::= SchemaArg (SchemaArg)*

<SchemaArg> ::= IDENT (":" Type)?

<Type> ::= "[" Type "]"
         | "module" "{" ModuleNames "}"
         | IDENT "{" ParsedTyName "}"
         | IDENT

<ModuleNames> ::= ModQual ("," ModQual)*

<DocAnn> ::= "@doc" STR

<DocStr> ::= STR

<MModel> ::= ModelAnn

<ModelAnn> ::= "@model" "[" PactFVModels "]"

<MDocOrModel> ::= DocAnn ModelAnn
                | ModelAnn DocAnn
                | DocAnn
                | ModelAnn
                | DocStr

<MDoc> ::= DocAnn
         | DocStr

<MTypeAnn> ::= ":" Type

<Block> ::= BlockBody

<BlockBody> ::= Expr+

<Expr> ::= "(" SExpr ")"
         | Atom

<SExpr> ::= LamExpr
          | LetExpr
          | IfExpr
          | TryExpr
          | ProgNExpr
          | GenAppExpr
          | SuspendExpr
          | CapExpr

<List> ::= "[" ListExprs "]"

<ListExprs> ::= Expr MCommaExpr* // Check *

<MCommaExpr> ::= "," ExprCommaSep
               | AppList

<ExprCommaSep> ::= Expr ("," Expr)*

<LamExpr> ::= "lambda" "(" LamArgs ")" Block

<IfExpr> ::= "if" Expr Expr Expr

<TryExpr> ::= "try" Expr Expr

<SuspendExpr> ::= "suspend" Expr

<CapExpr> ::= CapForm

<CapForm> ::= "with-capability" Expr Block
            | "create-user-guard" "(" ParsedName AppList ")"

<LamArgs> ::= LamArg ("," LamArg)*
<LamArg> ::= IDENT (":" Type)?

<LetExpr> ::= LET_KEYWORD "(" Binders ")" Block // Let

<Binders> ::= Binder (Binder)*
<Binder> ::= "(" IDENT [MTypeAnn] Expr ")"

<GenAppExpr> ::= Expr AppBindList // Check *

<ProgNExpr> ::= "progn" BlockBody

<AppList> ::= Expr+

<AppBindList> ::= (Expr | BindingForm)+

<BindingForm> ::= "{" BindPairs "}"

<BindPair> ::= STR ":=" MArg
             | TICK ":=" MArg

<BindPairs> ::= BindPair ("," BindPair)*

<Atom> ::= Var
         | Number
         | String
         | List
         | Bool
         | Operator
         | Object
         | "(" ")"

<Operator> ::= "and"
             | "or"
             | "enforce"
             | "enforce-one"

<Bool> ::= "true"
         | "false"

<Var> ::= IDENT "." ModQual
        | IDENT
        | IDENT "::" IDENT

<ParsedName> ::= IDENT "." ModQual
               | IDENT
               | IDENT "::" IDENT

<ParsedTyName> ::= IDENT "." ModQual
                 | IDENT

<ModQual> ::= IDENT "." IDENT
            | IDENT

<Number> ::= NUM+ "." NUM+
           | NUM+

<String> ::= STR
           | TICK

<Object> ::= "{" ObjectBody "}"

<ObjectBody> ::= FieldPairs

<FieldPair> ::= STR ":" Expr
              | TICK ":" Expr

<FieldPairs> ::= FieldPair ("," FieldPair)*

<PactFVModels> ::= PropExprList

<PropExprList> ::= PropExpr+

<PropExpr> ::= PropAtom
             | "(" PropExprList ")"
             | "[" PropExprList "]"

<PropAtom> ::= FVVar
             | FVNumber
             | FVString
             | FVKeyword
             | FVDelim
             | FVBool

<FVKeyword> ::= "let"
              | "lambda"
              | "if"
              | "progn"
              | "suspend"
              | "try"
              | "enforce"
              | "enforce-one"
              | "and"
              | "or"
              | "create-user-guard"
              | "with-capability"

<FVDelim> ::= "{"
            | "}"
            | ":"
            | ","

<FVBool> ::= "true"
           | "false"

<FVNumber> ::= NUM "." NUM
             | NUM

<FVString> ::= STR
             | TICK

<FVVar> ::= IDENT "." ModQual
          | IDENT
          | IDENT "::" IDENT
