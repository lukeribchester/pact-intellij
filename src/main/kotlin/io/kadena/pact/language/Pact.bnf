{
  parserClass="io.kadena.pact.language.parser.PactParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pact"
  psiImplClassSuffix="Impl"
  psiPackage="io.kadena.pact.language.psi"
  psiImplPackage="io.kadena.pact.language.psi.impl"

  elementTypeHolderClass="io.kadena.pact.language.psi.PactTypes"
  elementTypeClass="io.kadena.pact.language.psi.PactElementType"
  tokenTypeClass="io.kadena.pact.language.psi.PactTokenType"

  tokens = [
    /* Whitespace */
    CRLF="regexp:\R"
    WHITE_SPACE="regexp:[\ \n\t\f]"

    /* Comments */
    COMMENT="regexp:(;.*\n*)"

    /* Keywords */
    KEYWORD_BLESS="bless"
    KEYWORD_ENFORCE="enforce"
    KEYWORD_ENFORCE_ONE="enforce-one"
    KEYWORD_IF="if"
    KEYWORD_IMPLEMENTS="implements"
    KEYWORD_INTERFACE="interface"
    KEYWORD_LAMBDA="lambda"
    KEYWORD_LET="regexp:(let|let\*)"
    KEYWORD_MODULE="module"
    KEYWORD_BLOCK_INTRO="progn"
    KEYWORD_STEP="step"
    KEYWORD_STEP_WITH_ROLLBACK="step-with-rollback"
    KEYWORD_SUSPEND="suspend"
    KEYWORD_TRY="try"
    KEYWORD_IMPORT="use"

    /* Keywords (Capabilities) */
    KEYWORD_CREATE_USER_GUARD="create-user-guard"
    KEYWORD_WITH_CAPABILITY="with-capability"

    /* Keywords (Definitions) */
    KEYWORD_DEF_CAP="defcap"
    KEYWORD_DEF_CONST="defconst"
    KEYWORD_DEF_PACT="defpact"
    KEYWORD_DEF_SCHEMA="defschema"
    KEYWORD_DEF_TABLE="deftable"
    KEYWORD_DEFUN="defun"

    /* Keywords (REPL) */
    KEYWORD_LOAD="load"

    /* Annotations */
    KEYWORD_DOC_ANNOTATION="@doc"
    KEYWORD_EVENT_ANNOTATION="@event"
    KEYWORD_MANAGED_ANNOTATION="@managed"
    KEYWORD_MODEL_ANNOTATION="@model"

    /* Literals */
    STR="regexp:(\"([^\"\\]|\\\"|\\)*\")"
    NUM="regexp:([0-9])"
    TRUE="true"
    FALSE="false"

    /* Identifiers */
    TICK="regexp:'[a-zA-Z][a-zA-Z0-9\-_]*"
    IDENTIFIER="regexp:[a-zA-Z%#_&$@<>=\^?*!|/~][a-zA-Z0-9%#+\-_&$@<>=\^?*!|/~]*"

    /* Operators (Arithmetic) */
    PLUS="+"
    MINUS="-"
    MULTIPLY="*"
    DIVIDE="/"
    POW="^"
    ABS="abs"
    CEILING="ceiling"
    FLOOR="floor"
    LOG="log"
    LN="ln"
    DECIMAL="dec"
    EXP="exp"
    MOD="mod"
    ROUND="round"
    SQRT="sqrt"

    /* Operators (Assignment) */
    BIND_ASSIGN=":="

    /* Operators (Bitwise) */
    BITWISE_AND="&"
    BITWISE_OR="|"
    BITWISE_REVERSE="~"
    BITWISE_SHIFT="shift"
    BITWISE_XOR="xor"

    /* Operators (Logical) */
    AND="and"
    AND_SHORT_CIRCUIT="and?"
    NOT="not"
    NOT_SHORT_CIRCUIT="not?"
    OR="or"
    OR_SHORT_CIRCUIT="or?"

    /* Operators (Relational) */
    EQUAL="="
    NOT_EQUAL="!="
    LESS_THAN="<"
    LESS_THAN_OR_EQUAL="<="
    GREATER_THAN=">"
    GREATER_THAN_OR_EQUAL=">="

    /* Delimiters */
    PAREN_OPEN="("
    PAREN_CLOSE=")"
    BRACE_OPEN="{"
    BRACE_CLOSE="}"
    BRACKET_OPEN="["
    BRACKET_CLOSE="]"
    COLON=":"
    COMMA=","
    DOT="."
    DYN_ACC="::"
  ]
}

Program ::= !<<eof>> ReplProgramList | !<<eof>> ProgramList

ProgramList ::= TopLevel+

ReplProgramList ::= ReplTopLevel+

private TopLevel ::= Module
                   | Interface
                   | Expr
                   | Use { pin=1 }

private ReplTopLevel ::= "(" ReplSpecial ")"
                       | "(" Defun ")"
                       | "(" DefConst ")"
                       | TopLevel { pin=1 }

ReplSpecial ::= "load" STR Bool
              | "load" STR

private Governance ::= StringRaw
                     | IDENTIFIER
// TODO: Handle single character identifiers:
// TODO: Separate operators from IDENTIFIER
// https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/db.repl
StringRaw ::= STR
            | TICK

Module ::= "(" "module" IDENTIFIER Governance [MDocOrModel] ExtOrDefs ")" { pin=7 }

Interface ::= "(" "interface" IDENTIFIER [MDocOrModel] ImportOrIfDef ")" { pin=6 }

Ext ::= Use
        | "(" "implements" ModQual ")"
        | "(" "bless" StringRaw ")"

Use ::= "(" "use" ModQual STR? ImportList? ")"
        | "(" "import" ModQual STR? ImportList? ")"

private ExtOrDefs ::= (Def | Ext)+

private Def ::= Defun
              | DefConst
              | Defcap
              | Defschema
              | Deftable
              | DefPact

ImportOrIfDef ::= (IfDef | Use)+

private IfDef ::= IfDefun
                | DefConst
                | IfDefCap
                | Defschema
                | IfDefPact

IfDefun   ::= "(" "defun" IDENTIFIER [MTypeAnn] "(" MArgs ")" [MDocOrModel] ")" { pin=9 }
IfDefCap  ::= "(" "defcap" IDENTIFIER [MTypeAnn] "(" MArgs ")" [MDocOrModel] [MDCapMeta] ")" { pin=10 }
IfDefPact ::= "(" "defpact" IDENTIFIER [MTypeAnn] "(" MArgs ")" [MDocOrModel] ")" { pin=9 }

ImportList ::= "[" ImportNames? "]"

ImportNames ::= IDENTIFIER+

Defun     ::= "(" "defun" IDENTIFIER [MTypeAnn] "(" [MArgs] ")" [MDocOrModel] Block ")" { pin=9 }
Defcap    ::= "(" "defcap" IDENTIFIER [MTypeAnn] "(" [MArgs] ")" [MDocOrModel] [MDCapMeta] Block ")" { pin=10 }
DefPact   ::= "(" "defpact" IDENTIFIER [MTypeAnn] "(" MArgs ")" [MDocOrModel] Steps ")" { pin=9 }
DefConst  ::= "(" "defconst" IDENTIFIER [MTypeAnn] Expr [MDoc] ")" { pin=2 }
Defschema ::= "(" "defschema" IDENTIFIER [MDocOrModel] SchemaArgList ")" { pin=2 }
Deftable  ::= "(" "deftable" IDENTIFIER ":" "{" ParsedName "}" [MDoc] ")" { pin=2 }

Steps ::= Step+

Step ::= "(" "step" Expr [MModel] ")"
       | "(" "step" Expr Expr [MModel] ")"
       | "(" "step-with-rollback" Expr Expr [MModel] ")"
       | "(" "step-with-rollback" Expr Expr Expr [MModel] ")"

MDCapMeta ::= Managed
            | Event

Managed ::= "@managed" (IDENTIFIER ParsedName)*

Event ::= "@event"

MArgs ::= MArg*

MArg ::= IDENTIFIER ":" Type
       | IDENTIFIER

SchemaArgList ::= SchemaArg (SchemaArg) * // Verified

SchemaArg ::= IDENTIFIER (":" Type)?

Type ::= "[" Type "]"
       | "module" "{" ModuleNames "}"
       | IDENTIFIER "{" ParsedTyName "}"
       | IDENTIFIER

ModuleNames ::= ModQual ("," ModQual) *  // Verified

DocAnn ::= "@doc" STR

DocStr ::= STR

MModel ::= ModelAnn

ModelAnn ::= "@model" "[" PactFVModels "]"

private MDocOrModel ::= DocAnn ModelAnn
                      | ModelAnn DocAnn
                      | DocAnn
                      | ModelAnn
                      | DocStr

MDoc ::= DocAnn
       | DocStr

MTypeAnn ::= ":" Type

Block ::= BlockBody

BlockBody ::= Expr+

Expr ::= "(" SExpr ")"
       | Atom

private upper SExpr ::= LamExpr
                      | LetExpr
                      | IfExpr
                      | TryExpr
                      | ProgNExpr
                      | GenAppExpr
                      | SuspendExpr
                      | CapExpr

List ::= "[" [ListExprs] "]"

ListExprs ::= Expr MCommaExpr? // Check * ?

MCommaExpr ::= "," ExprCommaSep
             | AppList

ExprCommaSep ::= Expr ("," Expr) * // Verified

upper LamExpr ::= "lambda" "(" LamArgs ")" Block

upper IfExpr ::= "if" Expr Expr Expr

upper TryExpr ::= "try" Expr Expr

upper SuspendExpr ::= "suspend" Expr

upper CapExpr ::= CapForm

CapForm ::= "with-capability" Expr Block
          | "create-user-guard" "(" ParsedName AppList ")"

LamArgs ::= LamArg (LamArg)* // Verified
LamArg ::= IDENTIFIER (":" Type)?


upper LetExpr ::= KEYWORD_LET "(" Binders ")" Block // Let

//Binders ::= Binder (Binder)* // Verified
//Binder ::= "(" IDENTIFIER [MTypeAnn] Expr ")" // Type annotation fault

//Binders ::= Binder+ // Verified
Binders ::= ("(" IDENTIFIER [MTypeAnn] Expr ")")+

upper GenAppExpr ::= Expr AppBindList // Check * ?

upper ProgNExpr ::= "progn" BlockBody

AppList ::= Expr* // Was +

AppBindList ::= (Expr | BindingForm)*

BindingForm ::= "{" BindPairs "}"

BindPair ::= STR ":=" MArg
           | TICK ":=" MArg

BindPairs ::= BindPair ("," BindPair)* // Verified

Atom ::= Var
       | Number
       | String
       | List
       | Bool
       | Operator
       | Object
       | "(" ")"

Operator ::= "and"
           | "or"
           | "enforce"
           | "enforce-one"

Bool ::= TRUE
       | FALSE

Var ::= IDENTIFIER "." ModQual
      | IDENTIFIER "::" IDENTIFIER
      | IDENTIFIER

ParsedName ::= IDENTIFIER "." ModQual
             | IDENTIFIER "::" IDENTIFIER
             | IDENTIFIER

ParsedTyName ::= IDENTIFIER "." ModQual
               | IDENTIFIER

ModQual ::= IDENTIFIER "." IDENTIFIER
          | IDENTIFIER

Number ::= ["+" | "-"] NUM+ ["." NUM+]

String ::= STR
         | TICK

Object ::= "{" ObjectBody? "}"

ObjectBody ::= FieldPairs

FieldPair ::= STR ":" Expr
            | TICK ":" Expr

FieldPairs ::= FieldPair ("," FieldPair)* // Verified

PactFVModels ::= PropExprList

PropExprList ::= PropExpr* // Was +
// https://github.com/kadena-io/pact-5/blob/master/pact-tests/pact-tests/fv-syntax-regression.repl

PropExpr ::= PropAtom
           | "(" PropExprList ")"
           | "[" PropExprList "]"

PropAtom ::= FVVar
           | FVNumber
           | FVString
           | FVKeyword
           | FVDelim
           | FVBool

FVKeyword ::= "let"
            | "lambda"
            | "if"
            | "progn"
            | "suspend"
            | "try"
            | "enforce"
            | "enforce-one"
            | "and"
            | "or"
            | "create-user-guard"
            | "with-capability"

FVDelim ::= "{"
          | "}"
          | ":"
          | ","

FVBool ::= TRUE
         | FALSE

FVNumber ::= ["+" | "-"] NUM+ ["." NUM+]

FVString ::= STR
           | TICK

FVVar ::= IDENTIFIER "." ModQual
        | IDENTIFIER "::" IDENTIFIER
        | IDENTIFIER

// TODO: https://raw.githubusercontent.com/kadena-io/pact-5/master/pact-tests/pact-tests/yield.repl
