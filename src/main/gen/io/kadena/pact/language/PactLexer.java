/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.kadena.pact.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.kadena.pact.language.psi.PactTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Pact.flex</tt>
 */
class PactLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\1\22\0\1\45\1\60\1\5\4\60\1\42\1\46\1\47\1\14\1\60"+
    "\1\54\1\36\1\55\1\60\12\7\1\56\1\10\1\60\1\57\2\60\1\33\32\43\1\52\1\6\1\53"+
    "\1\60\1\44\1\0\1\23\1\31\1\22\1\17\1\12\1\16\1\35\1\27\1\15\1\43\1\40\1\11"+
    "\1\30\1\21\1\25\1\24\1\43\1\32\1\26\1\13\1\20\1\34\1\37\1\43\1\41\1\43\1\50"+
    "\1\60\1\51\1\60\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\21\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\0\1\20\1\0\1\4\5\5\1\21"+
    "\10\5\1\22\10\5\1\23\1\24\1\25\1\20\1\26"+
    "\4\5\1\27\4\5\1\30\1\5\1\31\12\5\1\26"+
    "\1\5\1\32\1\5\1\33\12\5\1\34\4\5\1\35"+
    "\7\5\1\36\1\5\1\37\5\5\1\40\3\5\1\41"+
    "\4\5\1\42\4\5\1\43\6\5\1\44\1\45\1\5"+
    "\1\46\1\5\1\47\4\5\1\50\3\5\1\51\5\5"+
    "\1\52\1\53\3\5\1\54\2\5\1\55\1\5\1\56"+
    "\4\5\1\57\3\5\1\60\16\5\1\61\2\5\1\62"+
    "\1\5\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\142\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\142\0\142\0\142\0\142\0\142\0\142\0\142"+
    "\0\142\0\u0498\0\223\0\u04c9\0\304\0\142\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u01b9\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u01b9\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\142\0\142\0\304\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u01b9\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u01b9\0\u0b4b\0\u01b9"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u01b9\0\u0d66\0\u01b9\0\u0d97\0\u01b9\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u01b9\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u01b9\0\u11fe"+
    "\0\u01b9\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u01b9\0\u1324"+
    "\0\u1355\0\u1386\0\u01b9\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u01b9"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u01b9\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u01b9\0\u01b9\0\u1665\0\u01b9\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u01b9\0\u17bc\0\u17ed"+
    "\0\u181e\0\u01b9\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u01b9"+
    "\0\u01b9\0\u1944\0\u1975\0\u19a6\0\u01b9\0\u19d7\0\u1a08\0\u01b9"+
    "\0\u1a39\0\u01b9\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u01b9\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u01b9\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u01b9\0\u1e6f\0\u1ea0\0\u01b9\0\u1ed1\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\13\1\20"+
    "\1\21\1\22\1\23\1\24\1\13\1\25\1\26\1\13"+
    "\1\27\3\13\1\30\2\13\1\31\2\13\1\4\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\13\1\3\1\4\1\43\1\44\1\43\40\3\1\44"+
    "\13\3\62\0\4\4\40\0\1\4\13\0\5\45\1\46"+
    "\1\47\52\45\1\7\1\0\1\50\1\7\1\0\54\7"+
    "\7\0\1\13\1\0\1\13\1\51\10\13\1\52\1\13"+
    "\1\53\14\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\10\13\1\54\20\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\21\13\1\55\7\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\31\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\5\13\1\56\2\13"+
    "\1\57\6\13\1\60\11\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\12\13\1\61\16\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\1\13\1\62\27\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\15\13"+
    "\1\63\13\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\21\13\1\64\7\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\10\13\1\65\20\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\21\13\1\66\7\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\21\13"+
    "\1\67\7\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\2\13\1\70\4\13\1\71\21\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\14\13\1\72\14\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\1\73"+
    "\30\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\1\13\1\74\4\13\1\75\10\13\1\76\11\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\4\13\1\77"+
    "\24\13\1\0\2\13\12\0\2\13\11\0\3\100\1\0"+
    "\16\100\1\0\2\100\1\0\3\100\1\0\1\100\73\0"+
    "\1\101\1\102\2\0\1\4\3\44\40\0\1\44\13\0"+
    "\5\45\1\103\1\47\52\45\2\0\1\50\65\0\1\13"+
    "\1\0\2\13\1\104\26\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\17\13\1\105\11\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\12\13\1\106\16\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\5\13"+
    "\1\107\23\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\7\13\1\110\20\13\1\111\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\2\13\1\112\26\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\13\13\1\113"+
    "\15\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\1\114\30\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\5\13\1\115\23\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\13\1\116\27\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\1\13\1\117\27\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\6\13"+
    "\1\120\22\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\14\13\1\121\14\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\13\1\122\27\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\15\13\1\123\13\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\6\13"+
    "\1\124\22\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\1\13\1\125\27\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\23\13\1\126\5\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\14\13\1\127\14\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\12\13"+
    "\1\130\1\13\1\131\14\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\2\13\1\132\26\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\100\1\0\3\100\1\0\16\100"+
    "\1\0\6\100\1\0\3\100\22\0\1\13\1\0\3\13"+
    "\1\133\25\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\20\13\1\134\10\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\6\13\1\135\22\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\14\13\1\136\14\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\1\13"+
    "\1\137\27\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\1\13\1\140\27\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\141\30\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\15\13\1\142\13\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\2\13\1\143"+
    "\4\13\1\144\1\13\1\145\1\13\1\146\1\13\1\147"+
    "\13\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\12\13\1\150\16\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\24\13\1\151\4\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\13\13\1\152\15\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\13\13\1\153"+
    "\15\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\7\13\1\154\21\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\15\13\1\155\13\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\1\13\1\156\27\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\11\13\1\157"+
    "\17\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\10\13\1\160\20\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\6\13\1\161\22\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\16\13\1\162\12\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\6\13\1\163"+
    "\22\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\21\13\1\164\7\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\21\13\1\165\7\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\1\13\1\166\27\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\1\13\1\167"+
    "\27\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\12\13\1\170\16\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\10\13\1\171\20\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\12\13\1\172\1\13\1\173"+
    "\14\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\12\13\1\174\16\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\11\13\1\175\17\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\2\13\1\176\26\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\10\13\1\177"+
    "\20\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\25\13\1\200\3\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\1\13\1\201\27\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\1\202\30\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\15\13\1\203\13\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\10\13"+
    "\1\204\20\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\12\13\1\205\16\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\13\1\206\27\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\25\13\1\207\3\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\12\13"+
    "\1\210\16\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\11\13\1\211\17\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\5\13\1\212\23\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\17\13\1\213\11\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\20\13"+
    "\1\214\10\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\13\13\1\215\15\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\10\13\1\216\20\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\11\13\1\217\17\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\16\13"+
    "\1\220\12\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\1\13\1\221\27\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\26\13\1\222\2\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\10\13\1\223\20\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\1\13"+
    "\1\224\27\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\2\13\1\225\26\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\24\13\1\226\4\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\1\227\30\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\11\13\1\230"+
    "\17\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\1\13\1\231\27\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\12\13\1\232\16\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\1\13\1\233\27\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\1\234\30\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\15\13"+
    "\1\235\13\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\2\13\1\236\26\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\13\1\237\27\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\25\13\1\240\3\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\4\13"+
    "\1\241\24\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\6\13\1\242\22\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\13\1\243\27\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\12\13\1\244\16\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\25\13"+
    "\1\245\3\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\11\13\1\246\17\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\10\13\1\247\20\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\1\13\1\250\27\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\2\13"+
    "\1\251\26\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\17\13\1\252\11\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\7\13\1\253\21\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\2\13\1\254\26\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\6\13"+
    "\1\255\22\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\13\13\1\256\15\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\14\13\1\257\14\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\1\13\1\260\27\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\2\13"+
    "\1\261\26\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\12\13\1\262\16\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\15\13\1\263\13\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\16\13\1\264\12\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\12\13"+
    "\1\265\16\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\10\13\1\266\20\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\15\13\1\267\13\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\1\13\1\270\27\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\25\13"+
    "\1\271\3\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\20\13\1\272\10\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\1\13\1\273\27\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\21\13\1\274\7\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\21\13"+
    "\1\275\7\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\4\13\1\276\24\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\25\13\1\277\3\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\14\13\1\300\14\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\1\301"+
    "\30\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\24\13\1\302\4\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\1\303\30\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\4\13\1\304\24\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\7\13\1\305\21\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\1\306"+
    "\30\13\1\0\2\13\12\0\2\13\7\0\1\13\1\0"+
    "\2\13\1\307\26\13\1\0\2\13\12\0\2\13\7\0"+
    "\1\13\1\0\12\13\1\310\16\13\1\0\2\13\12\0"+
    "\2\13\7\0\1\13\1\0\20\13\1\311\10\13\1\0"+
    "\2\13\12\0\2\13\7\0\1\13\1\0\30\13\1\312"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\21\13"+
    "\1\313\7\13\1\0\2\13\12\0\2\13\7\0\1\13"+
    "\1\0\12\13\1\314\16\13\1\0\2\13\12\0\2\13"+
    "\7\0\1\13\1\0\6\13\1\315\22\13\1\0\2\13"+
    "\12\0\2\13\7\0\1\13\1\0\11\13\1\316\17\13"+
    "\1\0\2\13\12\0\2\13\7\0\1\13\1\0\27\13"+
    "\1\317\1\13\1\0\2\13\12\0\2\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7938];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\23\1\10\11\3\1\1\0"+
    "\1\11\1\0\31\1\2\11\215\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 52: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 3: 
            { yybegin(YYINITIAL); return PactTypes.NUM;
            } 
            // fall through
          case 54: break;
          case 4: 
            { yybegin(YYINITIAL); return PactTypes.COMMENT;
            } 
            // fall through
          case 55: break;
          case 5: 
            { yybegin(YYINITIAL); return PactTypes.IDENT;
            } 
            // fall through
          case 56: break;
          case 6: 
            { yybegin(YYINITIAL); return PactTypes.OPEN_PARENS;
            } 
            // fall through
          case 57: break;
          case 7: 
            { yybegin(YYINITIAL); return PactTypes.CLOSE_PARENS;
            } 
            // fall through
          case 58: break;
          case 8: 
            { yybegin(YYINITIAL); return PactTypes.OPEN_BRACE;
            } 
            // fall through
          case 59: break;
          case 9: 
            { yybegin(YYINITIAL); return PactTypes.CLOSE_BRACE;
            } 
            // fall through
          case 60: break;
          case 10: 
            { yybegin(YYINITIAL); return PactTypes.OPEN_BRACKET;
            } 
            // fall through
          case 61: break;
          case 11: 
            { yybegin(YYINITIAL); return PactTypes.CLOSE_BRACKET;
            } 
            // fall through
          case 62: break;
          case 12: 
            { yybegin(YYINITIAL); return PactTypes.COMMA;
            } 
            // fall through
          case 63: break;
          case 13: 
            { yybegin(YYINITIAL); return PactTypes.DOT;
            } 
            // fall through
          case 64: break;
          case 14: 
            { yybegin(YYINITIAL); return PactTypes.COLON;
            } 
            // fall through
          case 65: break;
          case 15: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 66: break;
          case 16: 
            { yybegin(YYINITIAL); return PactTypes.STR;
            } 
            // fall through
          case 67: break;
          case 17: 
            { yybegin(YYINITIAL); return PactTypes.IF_KEYWORD;
            } 
            // fall through
          case 68: break;
          case 18: 
            { yybegin(YYINITIAL); return PactTypes.OR_KEYWORD;
            } 
            // fall through
          case 69: break;
          case 19: 
            { yybegin(YYINITIAL); return PactTypes.TICK;
            } 
            // fall through
          case 70: break;
          case 20: 
            { yybegin(YYINITIAL); return PactTypes.DYN_ACC;
            } 
            // fall through
          case 71: break;
          case 21: 
            { yybegin(YYINITIAL); return PactTypes.BIND_ASSIGN;
            } 
            // fall through
          case 72: break;
          case 22: 
            { yybegin(YYINITIAL); return PactTypes.LET_KEYWORD;
            } 
            // fall through
          case 73: break;
          case 23: 
            { yybegin(YYINITIAL); return PactTypes.TRY_KEYWORD;
            } 
            // fall through
          case 74: break;
          case 24: 
            { yybegin(YYINITIAL); return PactTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 75: break;
          case 25: 
            { yybegin(YYINITIAL); return PactTypes.AND_KEYWORD;
            } 
            // fall through
          case 76: break;
          case 26: 
            { yybegin(YYINITIAL); return PactTypes.LOAD_KEYWORD;
            } 
            // fall through
          case 77: break;
          case 27: 
            { yybegin(YYINITIAL); return PactTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 78: break;
          case 28: 
            { yybegin(YYINITIAL); return PactTypes.STEP_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 29: 
            { yybegin(YYINITIAL); return PactTypes.DOC_ANN_KEYWORD;
            } 
            // fall through
          case 80: break;
          case 30: 
            { yybegin(YYINITIAL); return PactTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 81: break;
          case 31: 
            { yybegin(YYINITIAL); return PactTypes.DEFUN_KEYWORD;
            } 
            // fall through
          case 82: break;
          case 32: 
            { yybegin(YYINITIAL); return PactTypes.BLOCK_INTRO_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 33: 
            { yybegin(YYINITIAL); return PactTypes.BLESS_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 34: 
            { yybegin(YYINITIAL); return PactTypes.LAMBDA_KEYWORD;
            } 
            // fall through
          case 85: break;
          case 35: 
            { yybegin(YYINITIAL); return PactTypes.DEF_CAP_KEYWORD;
            } 
            // fall through
          case 86: break;
          case 36: 
            { yybegin(YYINITIAL); return PactTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 87: break;
          case 37: 
            { yybegin(YYINITIAL); return PactTypes.EVENT_ANN_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 38: 
            { yybegin(YYINITIAL); return PactTypes.MODEL_ANN_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 39: 
            { yybegin(YYINITIAL); return PactTypes.ENFORCE_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 40: 
            { yybegin(YYINITIAL); return PactTypes.DEF_PACT_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 41: 
            { yybegin(YYINITIAL); return PactTypes.SUSPEND_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 42: 
            { yybegin(YYINITIAL); return PactTypes.DEF_TABLE_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 43: 
            { yybegin(YYINITIAL); return PactTypes.DEF_CONST_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 44: 
            { yybegin(YYINITIAL); return PactTypes.MANAGED_ANN_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 45: 
            { yybegin(YYINITIAL); return PactTypes.INTERFACE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 46: 
            { yybegin(YYINITIAL); return PactTypes.DEF_SCHEMA_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yybegin(YYINITIAL); return PactTypes.IMPLEMENTS_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 48: 
            { yybegin(YYINITIAL); return PactTypes.ENFORCE_ONE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yybegin(YYINITIAL); return PactTypes.WITH_CAPABILITY_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 50: 
            { yybegin(YYINITIAL); return PactTypes.CREATE_USER_GUARD_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 51: 
            { yybegin(YYINITIAL); return PactTypes.STEP_WITH_ROLLBACK_KEYWORD;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
