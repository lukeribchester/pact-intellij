/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.kadena.pact.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.kadena.pact.language.psi.PactTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Pact.flex</tt>
 */
class PactLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\1\22\0\1\3\1\60\1\37\3\0\1\54\1\45\1\63\1\64\1\27"+
    "\1\41\1\71\1\17\1\43\1\50\12\42\1\52\1\5\1\61\1\53\1\62\1\57\1\36\4\46\1\44"+
    "\25\46\1\67\1\40\1\70\1\51\1\47\1\0\1\24\1\6\1\16\1\26\1\10\1\13\1\31\1\34"+
    "\1\20\1\46\1\35\1\7\1\21\1\12\1\14\1\22\1\46\1\15\1\11\1\23\1\30\1\25\1\33"+
    "\1\46\1\32\1\46\1\65\1\55\1\66\1\56\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\11\4\1\5\6\4\1\6"+
    "\2\4\2\1\1\7\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\1\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\32"+
    "\1\3\14\4\1\0\1\4\1\33\10\4\4\0\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\4\1\44\10\4\1\45\7\4\1\46\2\4\1\47"+
    "\1\4\4\0\1\34\1\0\1\4\1\44\1\50\3\4"+
    "\1\51\1\4\1\52\10\4\1\53\1\54\6\4\3\0"+
    "\1\55\1\0\1\35\1\56\2\4\1\57\2\4\1\60"+
    "\6\4\1\61\6\4\1\62\1\4\3\0\1\63\7\4"+
    "\1\64\3\4\1\65\4\4\1\66\1\67\1\0\1\70"+
    "\1\4\1\71\10\4\1\72\2\4\1\0\6\4\1\73"+
    "\1\4\1\74\1\4\1\75\1\4\1\76\3\4\1\77"+
    "\1\100\1\4\1\101\5\4\1\102\2\4\1\103\2\4"+
    "\1\104\14\4\1\105\3\4\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\164\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u032c\0\u05aa\0\u05e4\0\u061e\0\164\0\164"+
    "\0\u0658\0\164\0\164\0\164\0\164\0\u0692\0\u06cc\0\u0706"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\256"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u05e4\0\u0a6c"+
    "\0\u02b8\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0570\0\164\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\164\0\164\0\164\0\164\0\164\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\164\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172"+
    "\0\u02b8\0\u11ac\0\u11e6\0\u02b8\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u0570\0\u1342\0\u137c\0\164\0\u02b8\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\164\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u02b8\0\164\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\164"+
    "\0\u18b2\0\u18b2\0\u02b8\0\u18ec\0\u1926\0\u02b8\0\u1960\0\u199a"+
    "\0\u02b8\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u02b8"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u02b8\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u02b8\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u02b8\0\u1f0a\0\u1f44\0\u1f7e\0\u02b8"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\164\0\164\0\u20a0\0\u20da"+
    "\0\u2114\0\u02b8\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u02b8\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u02b8\0\u2528\0\u02b8\0\u2562"+
    "\0\u02b8\0\u259c\0\164\0\u25d6\0\u2610\0\u264a\0\u02b8\0\u02b8"+
    "\0\u2684\0\u02b8\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u02b8"+
    "\0\u27e0\0\u281a\0\u02b8\0\u2854\0\u288e\0\u02b8\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2"+
    "\0\u2b0c\0\u2b46\0\u02b8\0\u2b80\0\u2bba\0\u2bf4\0\u02b8\0\u02b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\15\1\25\1\26\1\27\2\15\1\30"+
    "\2\15\1\31\1\32\1\3\1\33\1\34\1\35\1\15"+
    "\1\36\2\15\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\3\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\3\1\4\1\60\1\61"+
    "\1\60\65\3\73\0\4\4\65\0\1\5\1\0\1\62"+
    "\1\5\1\0\65\5\6\0\1\15\1\63\17\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\64\3\15\1\65\7\15\1\66\2\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\4\15\1\67\2\15\1\70\11\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\15\15\1\71"+
    "\3\15\1\0\1\72\5\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\6\15\1\73\12\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\16\15"+
    "\1\74\2\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\7\15\1\75\11\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\21\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\7\15\1\76\11\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\64\0\1\34\1\77\34\0"+
    "\4\15\1\100\1\101\5\15\1\102\5\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\6\15"+
    "\1\103\12\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\7\15\1\104\11\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\7\15"+
    "\1\105\11\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\4\15\1\106\14\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\2\15"+
    "\1\107\16\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\3\15\1\110\15\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\12\15"+
    "\1\111\6\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\32\0\1\112\10\0\1\113\4\0\1\114"+
    "\43\0\37\115\1\116\1\117\31\115\42\0\1\34\1\120"+
    "\70\0\1\120\35\0\11\121\1\0\7\121\1\0\6\121"+
    "\6\0\1\121\1\0\1\121\75\0\1\122\1\123\71\0"+
    "\1\124\71\0\1\125\71\0\1\126\17\0\1\4\3\61"+
    "\67\0\1\62\75\0\2\15\1\127\16\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\15\15"+
    "\1\130\3\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\16\15\1\131\2\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\13\15"+
    "\1\132\5\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\5\15\1\133\13\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\7\15"+
    "\1\134\11\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\2\15\1\135\16\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\3\15"+
    "\1\136\15\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\15\15\1\137\3\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\1\15"+
    "\1\140\17\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\21\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\7\0\1\141\20\0\2\15"+
    "\1\142\16\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\15\15\1\143\1\15\1\144\1\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\14\15\1\145\4\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\20\15\1\146\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\6\15\1\147\12\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\21\15\1\0\1\150\1\15"+
    "\1\151\3\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\20\15\1\152\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\5\15\1\153\13\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\154\16\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\15\15\1\155\3\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\47\0"+
    "\1\156\60\0\1\157\7\0\1\160\61\0\1\161\55\0"+
    "\37\115\1\162\1\117\31\115\10\0\1\163\31\0\1\120"+
    "\1\0\1\163\33\0\21\121\1\0\6\121\4\0\1\121"+
    "\1\0\1\121\1\0\2\121\30\0\3\15\1\164\15\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\21\15\1\165\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\20\15\1\166\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\1\167\20\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\6\15\1\170\12\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\6\15\1\171\12\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\14\15\1\172\4\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\14\15\1\173\4\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\21\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\7\0\1\174\20\0\3\15\1\175\15\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\16\15\1\176\2\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\2\15\1\177\16\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\16\15\1\200\2\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\1\15\1\201\17\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\21\15\1\0\1\202\5\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\14\15\1\203\4\15\1\0"+
    "\1\15\1\204\4\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\2\15\1\205\16\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\21\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\7\0"+
    "\1\206\20\0\3\15\1\207\4\15\1\210\3\15\1\211"+
    "\1\212\3\15\1\0\1\213\5\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\21\15\1\0\4\15\1\214"+
    "\1\15\4\0\1\15\1\0\1\15\1\0\2\15\32\0"+
    "\1\215\107\0\1\216\55\0\1\217\75\0\1\220\72\0"+
    "\1\221\21\0\1\221\1\222\35\0\3\15\1\223\15\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\20\15\1\224\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\7\15\1\225\11\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\7\15\1\226\11\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\11\15\1\227\7\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\230\16\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\2\15\1\231\16\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\15\15\1\232\3\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\7\15\1\233\11\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\7\15\1\234\11\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\2\15\1\235\16\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\1\15\1\236\17\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\2\15\1\237\16\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\4\15\1\240\14\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\10\15\1\241\10\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\6\15\1\242\7\15\1\243\2\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\7\15\1\244"+
    "\6\15\1\245\2\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\16\15\1\246\2\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\4\15\1\247\14\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\11\15\1\250\7\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\34\0"+
    "\1\251\67\0\1\252\105\0\1\253\107\0\1\222\35\0"+
    "\16\15\1\254\2\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\10\15\1\255\10\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\21\15\1\0\3\15\1\256\2\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\4\15\1\257\14\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\260\16\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\5\15\1\261\13\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\12\15\1\262\6\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\13\15\1\263\5\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\264\16\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\7\15\1\265\11\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\21\15\1\0\4\15\1\266\1\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\4\15\1\267\14\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\14\15\1\270\4\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\6\15\1\271\12\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\10\15\1\272\10\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\1\273\20\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\10\15"+
    "\1\274\10\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\45\0\1\275\55\0\1\276\113\0\1\277"+
    "\46\0\2\15\1\300\16\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\12\15\1\301\6\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\20\15\1\302\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\11\15\1\303\7\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\16\15\1\304\2\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\16\15\1\305\2\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\306\16\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\15\15\1\307\3\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\2\15\1\310\16\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\3\15\1\311\15\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\14\15\1\312\4\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\15\15\1\313\3\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\1\15\1\314\17\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\16\15\1\315\2\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\32\0"+
    "\1\316\67\0\11\15\1\317\7\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\15\15\1\320"+
    "\3\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\21\15\1\0\1\321\5\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\10\15\1\322\10\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\4\15\1\323\14\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\4\15\1\324\14\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\21\15\1\0\2\15\1\325\3\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\13\15\1\326\5\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\15\15\1\327\3\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\2\15\1\330\16\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\2\15\1\331\16\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\14\15\1\332\4\15"+
    "\1\0\6\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\50\0\1\333\51\0\6\15\1\334\12\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\21\15"+
    "\1\0\4\15\1\335\1\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\3\15\1\336\15\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\2\15"+
    "\1\337\16\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\15\15\1\340\3\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\15\15"+
    "\1\341\3\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\16\15\1\342\2\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\7\15"+
    "\1\343\11\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\16\15\1\344\2\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\4\15"+
    "\1\345\14\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\11\15\1\346\7\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\2\15"+
    "\1\347\16\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\3\15\1\350\15\15\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\15\15"+
    "\1\351\3\15\1\0\6\15\4\0\1\15\1\0\1\15"+
    "\1\0\2\15\30\0\1\352\20\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\2\15\1\353"+
    "\16\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\7\15\1\354\11\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\7\15\1\355"+
    "\11\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\21\15\1\0\2\15\1\356\3\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\12\15\1\357"+
    "\6\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\6\15\1\360\12\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\11\15\1\361"+
    "\7\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\1\15\1\362\17\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\1\15\1\363"+
    "\17\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\21\15\1\0\1\15\1\364\4\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\12\15\1\365"+
    "\6\15\1\0\6\15\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\30\0\1\15\1\366\17\15\1\0\6\15\4\0"+
    "\1\15\1\0\1\15\1\0\2\15\30\0\21\15\1\0"+
    "\1\367\5\15\4\0\1\15\1\0\1\15\1\0\2\15"+
    "\30\0\15\15\1\370\3\15\1\0\6\15\4\0\1\15"+
    "\1\0\1\15\1\0\2\15\30\0\1\371\20\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\16\15\1\372\2\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\21\15\1\0\2\15\1\373"+
    "\3\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\16\15\1\374\2\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\7\15\1\375\11\15\1\0"+
    "\6\15\4\0\1\15\1\0\1\15\1\0\2\15\30\0"+
    "\10\15\1\376\10\15\1\0\6\15\4\0\1\15\1\0"+
    "\1\15\1\0\2\15\30\0\20\15\1\377\1\0\6\15"+
    "\4\0\1\15\1\0\1\15\1\0\2\15\30\0\21\15"+
    "\1\0\5\15\1\u0100\4\0\1\15\1\0\1\15\1\0"+
    "\2\15\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\22\1\1\11\10\1\2\11\1\1\4\11"+
    "\3\1\7\11\17\1\1\0\12\1\4\0\1\11\1\0"+
    "\2\1\5\11\12\1\1\11\14\1\4\0\1\1\1\0"+
    "\1\1\1\11\6\1\1\11\11\1\1\11\6\1\3\0"+
    "\1\11\1\0\27\1\3\0\21\1\2\11\1\0\16\1"+
    "\1\0\14\1\1\11\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 72: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 73: break;
          case 3: 
            { yybegin(YYINITIAL); return PactTypes.COMMENT;
            } 
            // fall through
          case 74: break;
          case 4: 
            { yybegin(YYINITIAL); return PactTypes.IDENTIFIER;
            } 
            // fall through
          case 75: break;
          case 5: 
            { yybegin(YYINITIAL); return PactTypes.MINUS;
            } 
            // fall through
          case 76: break;
          case 6: 
            { yybegin(YYINITIAL); return PactTypes.MULTIPLY;
            } 
            // fall through
          case 77: break;
          case 7: 
            { yybegin(YYINITIAL); return PactTypes.PLUS;
            } 
            // fall through
          case 78: break;
          case 8: 
            { yybegin(YYINITIAL); return PactTypes.INTEGER;
            } 
            // fall through
          case 79: break;
          case 9: 
            { yybegin(YYINITIAL); return PactTypes.DOT;
            } 
            // fall through
          case 80: break;
          case 10: 
            { yybegin(YYINITIAL); return PactTypes.DIVIDE;
            } 
            // fall through
          case 81: break;
          case 11: 
            { yybegin(YYINITIAL); return PactTypes.POW;
            } 
            // fall through
          case 82: break;
          case 12: 
            { yybegin(YYINITIAL); return PactTypes.COLON;
            } 
            // fall through
          case 83: break;
          case 13: 
            { yybegin(YYINITIAL); return PactTypes.EQUAL;
            } 
            // fall through
          case 84: break;
          case 14: 
            { yybegin(YYINITIAL); return PactTypes.BITWISE_AND;
            } 
            // fall through
          case 85: break;
          case 15: 
            { yybegin(YYINITIAL); return PactTypes.BITWISE_OR;
            } 
            // fall through
          case 86: break;
          case 16: 
            { yybegin(YYINITIAL); return PactTypes.BITWISE_REVERSE;
            } 
            // fall through
          case 87: break;
          case 17: 
            { yybegin(YYINITIAL); return PactTypes.LESS_THAN;
            } 
            // fall through
          case 88: break;
          case 18: 
            { yybegin(YYINITIAL); return PactTypes.GREATER_THAN;
            } 
            // fall through
          case 89: break;
          case 19: 
            { yybegin(YYINITIAL); return PactTypes.PAREN_OPEN;
            } 
            // fall through
          case 90: break;
          case 20: 
            { yybegin(YYINITIAL); return PactTypes.PAREN_CLOSE;
            } 
            // fall through
          case 91: break;
          case 21: 
            { yybegin(YYINITIAL); return PactTypes.BRACE_OPEN;
            } 
            // fall through
          case 92: break;
          case 22: 
            { yybegin(YYINITIAL); return PactTypes.BRACE_CLOSE;
            } 
            // fall through
          case 93: break;
          case 23: 
            { yybegin(YYINITIAL); return PactTypes.BRACKET_OPEN;
            } 
            // fall through
          case 94: break;
          case 24: 
            { yybegin(YYINITIAL); return PactTypes.BRACKET_CLOSE;
            } 
            // fall through
          case 95: break;
          case 25: 
            { yybegin(YYINITIAL); return PactTypes.COMMA;
            } 
            // fall through
          case 96: break;
          case 26: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 97: break;
          case 27: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_IF;
            } 
            // fall through
          case 98: break;
          case 28: 
            { yybegin(YYINITIAL); return PactTypes.STR;
            } 
            // fall through
          case 99: break;
          case 29: 
            { yybegin(YYINITIAL); return PactTypes.FLOATING_POINT;
            } 
            // fall through
          case 100: break;
          case 30: 
            { yybegin(YYINITIAL); return PactTypes.TICK;
            } 
            // fall through
          case 101: break;
          case 31: 
            { yybegin(YYINITIAL); return PactTypes.DYN_ACC;
            } 
            // fall through
          case 102: break;
          case 32: 
            { yybegin(YYINITIAL); return PactTypes.BIND_ASSIGN;
            } 
            // fall through
          case 103: break;
          case 33: 
            { yybegin(YYINITIAL); return PactTypes.NOT_EQUAL;
            } 
            // fall through
          case 104: break;
          case 34: 
            { yybegin(YYINITIAL); return PactTypes.LESS_THAN_OR_EQUAL;
            } 
            // fall through
          case 105: break;
          case 35: 
            { yybegin(YYINITIAL); return PactTypes.GREATER_THAN_OR_EQUAL;
            } 
            // fall through
          case 106: break;
          case 36: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_LET;
            } 
            // fall through
          case 107: break;
          case 37: 
            { yybegin(YYINITIAL); return PactTypes.OR_SHORT_CIRCUIT;
            } 
            // fall through
          case 108: break;
          case 38: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_TRY;
            } 
            // fall through
          case 109: break;
          case 39: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_IMPORT;
            } 
            // fall through
          case 110: break;
          case 40: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_LOAD;
            } 
            // fall through
          case 111: break;
          case 41: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_STEP;
            } 
            // fall through
          case 112: break;
          case 42: 
            { yybegin(YYINITIAL); return PactTypes.NOT_SHORT_CIRCUIT;
            } 
            // fall through
          case 113: break;
          case 43: 
            { yybegin(YYINITIAL); return PactTypes.TRUE;
            } 
            // fall through
          case 114: break;
          case 44: 
            { yybegin(YYINITIAL); return PactTypes.AND_SHORT_CIRCUIT;
            } 
            // fall through
          case 115: break;
          case 45: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DOC_ANNOTATION;
            } 
            // fall through
          case 116: break;
          case 46: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_BLESS;
            } 
            // fall through
          case 117: break;
          case 47: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_ERROR;
            } 
            // fall through
          case 118: break;
          case 48: 
            { yybegin(YYINITIAL); return PactTypes.FALSE;
            } 
            // fall through
          case 119: break;
          case 49: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_BLOCK_INTRO;
            } 
            // fall through
          case 120: break;
          case 50: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEFUN;
            } 
            // fall through
          case 121: break;
          case 51: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_LAMBDA;
            } 
            // fall through
          case 122: break;
          case 52: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_MODULE;
            } 
            // fall through
          case 123: break;
          case 53: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_CAP;
            } 
            // fall through
          case 124: break;
          case 54: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_EVENT_ANNOTATION;
            } 
            // fall through
          case 125: break;
          case 55: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_MODEL_ANNOTATION;
            } 
            // fall through
          case 126: break;
          case 56: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_ENFORCE;
            } 
            // fall through
          case 127: break;
          case 57: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_SUSPEND;
            } 
            // fall through
          case 128: break;
          case 58: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_PACT;
            } 
            // fall through
          case 129: break;
          case 59: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_PROPERTY;
            } 
            // fall through
          case 130: break;
          case 60: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_CONST;
            } 
            // fall through
          case 131: break;
          case 61: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_TABLE;
            } 
            // fall through
          case 132: break;
          case 62: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_MANAGED_ANNOTATION;
            } 
            // fall through
          case 133: break;
          case 63: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_INTERFACE;
            } 
            // fall through
          case 134: break;
          case 64: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_INVARIANT;
            } 
            // fall through
          case 135: break;
          case 65: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_SCHEMA;
            } 
            // fall through
          case 136: break;
          case 66: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_IMPLEMENTS;
            } 
            // fall through
          case 137: break;
          case 67: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_ENFORCE_ONE;
            } 
            // fall through
          case 138: break;
          case 68: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_PROPERTY;
            } 
            // fall through
          case 139: break;
          case 69: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_WITH_CAPABILITY;
            } 
            // fall through
          case 140: break;
          case 70: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_CREATE_USER_GUARD;
            } 
            // fall through
          case 141: break;
          case 71: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_STEP_WITH_ROLLBACK;
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
