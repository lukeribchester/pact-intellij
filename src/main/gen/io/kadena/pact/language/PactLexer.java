/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.kadena.pact.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.kadena.pact.language.psi.PactTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Pact.flex</tt>
 */
class PactLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\1\22\0\1\3\1\55\1\5\4\55\1\42\1\43\1\44\1\11\1\55"+
    "\1\51\1\36\1\52\1\55\12\7\1\53\1\10\1\55\1\54\2\55\1\33\32\55\1\47\1\6\1\50"+
    "\2\55\1\0\1\22\1\31\1\21\1\15\1\16\1\14\1\35\1\27\1\13\1\55\1\40\1\12\1\30"+
    "\1\20\1\24\1\23\1\55\1\32\1\25\1\26\1\17\1\34\1\37\1\55\1\41\1\55\1\45\1\55"+
    "\1\46\1\55\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\2\4\3\5"+
    "\1\4\7\5\1\4\4\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\0"+
    "\1\21\2\0\1\22\2\5\1\23\11\5\1\24\11\5"+
    "\1\25\1\26\1\21\7\5\1\27\1\5\1\30\4\5"+
    "\1\31\10\5\1\32\14\5\1\33\1\34\2\5\1\35"+
    "\7\5\1\36\1\37\7\5\1\40\3\5\1\41\4\5"+
    "\1\42\2\5\1\43\10\5\1\44\1\45\1\5\1\46"+
    "\4\5\1\47\2\5\1\50\1\5\1\51\5\5\1\52"+
    "\1\5\1\53\3\5\1\54\1\5\1\55\1\5\1\56"+
    "\4\5\1\57\4\5\1\60\16\5\1\61\2\5\1\62"+
    "\1\5\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\134\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0114\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\134\0\134\0\134\0\134\0\134\0\134\0\134"+
    "\0\134\0\134\0\u0422\0\212\0\u0450\0\270\0\134\0\u047e"+
    "\0\346\0\134\0\u04ac\0\u04da\0\u0114\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u0114\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\134\0\134\0\270\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0958\0\u0114\0\u0986\0\u0114\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0114\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0114\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0114\0\u0e32\0\u0e60\0\u0114\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0f74\0\u0fa2\0\u0114\0\u0114\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u0114\0\u1112\0\u1140\0\u116e"+
    "\0\u0114\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u0114\0\u1254\0\u1282"+
    "\0\u0114\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u0114\0\u0114\0\u1420\0\u0114\0\u144e\0\u147c\0\u14aa"+
    "\0\u14d8\0\u0114\0\u1506\0\u1534\0\u1562\0\u1590\0\u0114\0\u15be"+
    "\0\u15ec\0\u161a\0\u1648\0\u1676\0\u0114\0\u16a4\0\u0114\0\u16d2"+
    "\0\u1700\0\u172e\0\u0114\0\u175c\0\u0114\0\u178a\0\u0114\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u0114\0\u1870\0\u189e\0\u18cc\0\u18fa"+
    "\0\u0114\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c"+
    "\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u0114"+
    "\0\u1bac\0\u1bda\0\u0114\0\u1c08\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\17\1\26\1\27\1\17"+
    "\1\30\3\17\1\31\2\17\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\17\1\3"+
    "\1\4\1\44\1\45\1\44\51\3\57\0\4\4\51\0"+
    "\5\46\1\47\1\50\47\46\1\51\1\0\1\52\1\51"+
    "\1\0\51\51\7\0\1\17\1\0\31\17\12\0\2\17"+
    "\7\0\1\17\1\0\11\17\1\53\1\17\1\54\15\17"+
    "\12\0\2\17\7\0\1\17\1\0\3\17\1\55\3\17"+
    "\1\56\7\17\1\57\11\17\12\0\2\17\7\0\1\17"+
    "\1\0\11\17\1\60\17\17\12\0\2\17\7\0\1\17"+
    "\1\0\5\17\1\61\23\17\12\0\2\17\7\0\1\17"+
    "\1\0\7\17\1\62\21\17\12\0\2\17\7\0\1\17"+
    "\1\0\14\17\1\63\14\17\12\0\2\17\7\0\1\17"+
    "\1\0\21\17\1\64\7\17\12\0\2\17\7\0\1\17"+
    "\1\0\7\17\1\65\21\17\12\0\2\17\7\0\1\17"+
    "\1\0\21\17\1\66\7\17\12\0\2\17\7\0\1\17"+
    "\1\0\21\17\1\67\7\17\12\0\2\17\7\0\1\17"+
    "\1\0\6\17\1\70\6\17\1\71\13\17\12\0\2\17"+
    "\7\0\1\17\1\0\21\17\1\72\7\17\12\0\2\17"+
    "\7\0\1\17\1\0\13\17\1\73\15\17\12\0\2\17"+
    "\7\0\1\17\1\0\1\17\1\74\27\17\12\0\2\17"+
    "\7\0\1\17\1\0\4\17\1\75\1\76\11\17\1\77"+
    "\11\17\12\0\2\17\7\0\1\17\1\0\2\17\1\100"+
    "\26\17\12\0\2\17\53\0\1\101\1\102\2\0\1\4"+
    "\3\45\51\0\5\46\1\103\1\50\47\46\7\0\1\17"+
    "\1\0\17\17\1\104\11\17\12\0\2\17\7\0\1\17"+
    "\1\0\11\17\1\105\17\17\12\0\2\17\7\0\1\17"+
    "\1\0\15\17\1\106\13\17\12\0\2\17\7\0\1\17"+
    "\1\0\12\17\1\107\16\17\12\0\2\17\7\0\1\17"+
    "\1\0\1\17\1\110\27\17\12\0\2\17\7\0\1\17"+
    "\1\0\3\17\1\111\25\17\12\0\2\17\7\0\1\17"+
    "\1\0\3\17\1\112\25\17\12\0\2\17\7\0\1\17"+
    "\1\0\5\17\1\113\23\17\12\0\2\17\7\0\1\17"+
    "\1\0\5\17\1\114\23\17\12\0\2\17\7\0\1\17"+
    "\1\0\4\17\1\115\24\17\12\0\2\17\7\0\1\17"+
    "\1\0\13\17\1\116\15\17\12\0\2\17\7\0\1\17"+
    "\1\0\14\17\1\117\14\17\12\0\2\17\7\0\1\17"+
    "\1\0\5\17\1\120\23\17\12\0\2\17\7\0\1\17"+
    "\1\0\6\17\1\121\21\17\1\122\12\0\2\17\7\0"+
    "\1\17\1\0\4\17\1\123\24\17\12\0\2\17\7\0"+
    "\1\17\1\0\5\17\1\124\23\17\12\0\2\17\7\0"+
    "\1\17\1\0\13\17\1\125\15\17\12\0\2\17\7\0"+
    "\1\17\1\0\23\17\1\126\5\17\12\0\2\17\7\0"+
    "\1\17\1\0\11\17\1\127\1\17\1\130\15\17\12\0"+
    "\2\17\7\0\1\17\1\0\15\17\1\131\13\17\12\0"+
    "\2\17\7\0\1\17\1\0\20\17\1\132\10\17\12\0"+
    "\2\17\7\0\1\17\1\0\4\17\1\133\24\17\12\0"+
    "\2\17\7\0\1\17\1\0\5\17\1\134\23\17\12\0"+
    "\2\17\7\0\1\17\1\0\1\17\1\135\27\17\12\0"+
    "\2\17\7\0\1\17\1\0\14\17\1\136\14\17\12\0"+
    "\2\17\7\0\1\17\1\0\6\17\1\137\1\17\1\140"+
    "\1\17\1\141\1\17\1\142\1\143\13\17\12\0\2\17"+
    "\7\0\1\17\1\0\13\17\1\144\15\17\12\0\2\17"+
    "\7\0\1\17\1\0\11\17\1\145\17\17\12\0\2\17"+
    "\7\0\1\17\1\0\24\17\1\146\4\17\12\0\2\17"+
    "\7\0\1\17\1\0\12\17\1\147\16\17\12\0\2\17"+
    "\7\0\1\17\1\0\12\17\1\150\16\17\12\0\2\17"+
    "\7\0\1\17\1\0\5\17\1\151\23\17\12\0\2\17"+
    "\7\0\1\17\1\0\6\17\1\152\22\17\12\0\2\17"+
    "\7\0\1\17\1\0\14\17\1\153\14\17\12\0\2\17"+
    "\7\0\1\17\1\0\10\17\1\154\20\17\12\0\2\17"+
    "\7\0\1\17\1\0\5\17\1\155\23\17\12\0\2\17"+
    "\7\0\1\17\1\0\7\17\1\156\21\17\12\0\2\17"+
    "\7\0\1\17\1\0\4\17\1\157\24\17\12\0\2\17"+
    "\7\0\1\17\1\0\16\17\1\160\12\17\12\0\2\17"+
    "\7\0\1\17\1\0\4\17\1\161\24\17\12\0\2\17"+
    "\7\0\1\17\1\0\21\17\1\162\7\17\12\0\2\17"+
    "\7\0\1\17\1\0\5\17\1\163\23\17\12\0\2\17"+
    "\7\0\1\17\1\0\5\17\1\164\23\17\12\0\2\17"+
    "\7\0\1\17\1\0\7\17\1\165\21\17\12\0\2\17"+
    "\7\0\1\17\1\0\11\17\1\166\1\17\1\167\15\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\170\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\10\17\1\171\20\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\172\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\21\17\1\173\7\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\174\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\7\17\1\175\21\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\176\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\25\17\1\177\3\17"+
    "\12\0\2\17\7\0\1\17\1\0\1\17\1\200\27\17"+
    "\12\0\2\17\7\0\1\17\1\0\14\17\1\201\14\17"+
    "\12\0\2\17\7\0\1\17\1\0\7\17\1\202\21\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\203\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\204\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\25\17\1\205\3\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\206\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\3\17\1\207\25\17"+
    "\12\0\2\17\7\0\1\17\1\0\17\17\1\210\11\17"+
    "\12\0\2\17\7\0\1\17\1\0\12\17\1\211\16\17"+
    "\12\0\2\17\7\0\1\17\1\0\7\17\1\212\21\17"+
    "\12\0\2\17\7\0\1\17\1\0\10\17\1\213\20\17"+
    "\12\0\2\17\7\0\1\17\1\0\16\17\1\214\12\17"+
    "\12\0\2\17\7\0\1\17\1\0\20\17\1\215\10\17"+
    "\12\0\2\17\7\0\1\17\1\0\10\17\1\216\20\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\217\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\7\17\1\220\21\17"+
    "\12\0\2\17\7\0\1\17\1\0\26\17\1\221\2\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\222\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\223\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\24\17\1\224\4\17"+
    "\12\0\2\17\7\0\1\17\1\0\1\17\1\225\27\17"+
    "\12\0\2\17\7\0\1\17\1\0\10\17\1\226\20\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\227\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\230\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\14\17\1\231\14\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\232\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\233\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\1\17\1\234\27\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\235\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\25\17\1\236\3\17"+
    "\12\0\2\17\7\0\1\17\1\0\4\17\1\237\24\17"+
    "\12\0\2\17\7\0\1\17\1\0\2\17\1\240\26\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\241\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\242\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\10\17\1\243\20\17"+
    "\12\0\2\17\7\0\1\17\1\0\7\17\1\244\21\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\245\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\17\17\1\246\11\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\247\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\25\17\1\250\3\17"+
    "\12\0\2\17\7\0\1\17\1\0\6\17\1\251\22\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\252\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\4\17\1\253\24\17"+
    "\12\0\2\17\7\0\1\17\1\0\12\17\1\254\16\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\255\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\256\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\257\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\13\17\1\260\15\17"+
    "\12\0\2\17\7\0\1\17\1\0\14\17\1\261\14\17"+
    "\12\0\2\17\7\0\1\17\1\0\16\17\1\262\12\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\263\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\14\17\1\264\14\17"+
    "\12\0\2\17\7\0\1\17\1\0\7\17\1\265\21\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\266\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\25\17\1\267\3\17"+
    "\12\0\2\17\7\0\1\17\1\0\20\17\1\270\10\17"+
    "\12\0\2\17\7\0\1\17\1\0\5\17\1\271\23\17"+
    "\12\0\2\17\7\0\1\17\1\0\21\17\1\272\7\17"+
    "\12\0\2\17\7\0\1\17\1\0\21\17\1\273\7\17"+
    "\12\0\2\17\7\0\1\17\1\0\2\17\1\274\26\17"+
    "\12\0\2\17\7\0\1\17\1\0\25\17\1\275\3\17"+
    "\12\0\2\17\7\0\1\17\1\0\13\17\1\276\15\17"+
    "\12\0\2\17\7\0\1\17\1\0\1\17\1\277\27\17"+
    "\12\0\2\17\7\0\1\17\1\0\24\17\1\300\4\17"+
    "\12\0\2\17\7\0\1\17\1\0\1\17\1\301\27\17"+
    "\12\0\2\17\7\0\1\17\1\0\2\17\1\302\26\17"+
    "\12\0\2\17\7\0\1\17\1\0\6\17\1\303\22\17"+
    "\12\0\2\17\7\0\1\17\1\0\1\17\1\304\27\17"+
    "\12\0\2\17\7\0\1\17\1\0\15\17\1\305\13\17"+
    "\12\0\2\17\7\0\1\17\1\0\11\17\1\306\17\17"+
    "\12\0\2\17\7\0\1\17\1\0\20\17\1\307\10\17"+
    "\12\0\2\17\7\0\1\17\1\0\30\17\1\310\12\0"+
    "\2\17\7\0\1\17\1\0\21\17\1\311\7\17\12\0"+
    "\2\17\7\0\1\17\1\0\11\17\1\312\17\17\12\0"+
    "\2\17\7\0\1\17\1\0\4\17\1\313\24\17\12\0"+
    "\2\17\7\0\1\17\1\0\10\17\1\314\20\17\12\0"+
    "\2\17\7\0\1\17\1\0\27\17\1\315\1\17\12\0"+
    "\2\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7222];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\23\1\11\11\3\1\1\0"+
    "\1\11\2\0\1\11\26\1\2\11\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 52: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 3: 
            { yybegin(YYINITIAL); return PactTypes.NUM;
            } 
            // fall through
          case 54: break;
          case 4: 
            { yybegin(YYINITIAL); return PactTypes.LET_KEYWORD;
            } 
            // fall through
          case 55: break;
          case 5: 
            { yybegin(YYINITIAL); return PactTypes.IDENT;
            } 
            // fall through
          case 56: break;
          case 6: 
            { yybegin(YYINITIAL); return PactTypes.TICK;
            } 
            // fall through
          case 57: break;
          case 7: 
            { yybegin(YYINITIAL); return PactTypes.OPEN_PARENS;
            } 
            // fall through
          case 58: break;
          case 8: 
            { yybegin(YYINITIAL); return PactTypes.CLOSE_PARENS;
            } 
            // fall through
          case 59: break;
          case 9: 
            { yybegin(YYINITIAL); return PactTypes.OPEN_BRACE;
            } 
            // fall through
          case 60: break;
          case 10: 
            { yybegin(YYINITIAL); return PactTypes.CLOSE_BRACE;
            } 
            // fall through
          case 61: break;
          case 11: 
            { yybegin(YYINITIAL); return PactTypes.OPEN_BRACKET;
            } 
            // fall through
          case 62: break;
          case 12: 
            { yybegin(YYINITIAL); return PactTypes.CLOSE_BRACKET;
            } 
            // fall through
          case 63: break;
          case 13: 
            { yybegin(YYINITIAL); return PactTypes.COMMA;
            } 
            // fall through
          case 64: break;
          case 14: 
            { yybegin(YYINITIAL); return PactTypes.DOT;
            } 
            // fall through
          case 65: break;
          case 15: 
            { yybegin(YYINITIAL); return PactTypes.COLON;
            } 
            // fall through
          case 66: break;
          case 16: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 17: 
            { yybegin(YYINITIAL); return PactTypes.STR;
            } 
            // fall through
          case 68: break;
          case 18: 
            { yybegin(YYINITIAL); return PactTypes.COMMENT;
            } 
            // fall through
          case 69: break;
          case 19: 
            { yybegin(YYINITIAL); return PactTypes.IF_KEYWORD;
            } 
            // fall through
          case 70: break;
          case 20: 
            { yybegin(YYINITIAL); return PactTypes.OR_KEYWORD;
            } 
            // fall through
          case 71: break;
          case 21: 
            { yybegin(YYINITIAL); return PactTypes.DYN_ACC;
            } 
            // fall through
          case 72: break;
          case 22: 
            { yybegin(YYINITIAL); return PactTypes.BIND_ASSIGN;
            } 
            // fall through
          case 73: break;
          case 23: 
            { yybegin(YYINITIAL); return PactTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 74: break;
          case 24: 
            { yybegin(YYINITIAL); return PactTypes.AND_KEYWORD;
            } 
            // fall through
          case 75: break;
          case 25: 
            { yybegin(YYINITIAL); return PactTypes.TRY_KEYWORD;
            } 
            // fall through
          case 76: break;
          case 26: 
            { yybegin(YYINITIAL); return PactTypes.LOAD_KEYWORD;
            } 
            // fall through
          case 77: break;
          case 27: 
            { yybegin(YYINITIAL); return PactTypes.STEP_KEYWORD;
            } 
            // fall through
          case 78: break;
          case 28: 
            { yybegin(YYINITIAL); return PactTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 29: 
            { yybegin(YYINITIAL); return PactTypes.DOC_ANN_KEYWORD;
            } 
            // fall through
          case 80: break;
          case 30: 
            { yybegin(YYINITIAL); return PactTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 81: break;
          case 31: 
            { yybegin(YYINITIAL); return PactTypes.DEFUN_KEYWORD;
            } 
            // fall through
          case 82: break;
          case 32: 
            { yybegin(YYINITIAL); return PactTypes.BLOCK_INTRO_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 33: 
            { yybegin(YYINITIAL); return PactTypes.BLESS_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 34: 
            { yybegin(YYINITIAL); return PactTypes.LAMBDA_KEYWORD;
            } 
            // fall through
          case 85: break;
          case 35: 
            { yybegin(YYINITIAL); return PactTypes.DEF_CAP_KEYWORD;
            } 
            // fall through
          case 86: break;
          case 36: 
            { yybegin(YYINITIAL); return PactTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 87: break;
          case 37: 
            { yybegin(YYINITIAL); return PactTypes.EVENT_ANN_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 38: 
            { yybegin(YYINITIAL); return PactTypes.MODEL_ANN_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 39: 
            { yybegin(YYINITIAL); return PactTypes.DEF_PACT_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 40: 
            { yybegin(YYINITIAL); return PactTypes.ENFORCE_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 41: 
            { yybegin(YYINITIAL); return PactTypes.SUSPEND_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 42: 
            { yybegin(YYINITIAL); return PactTypes.DEF_CONST_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 43: 
            { yybegin(YYINITIAL); return PactTypes.DEF_TABLE_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 44: 
            { yybegin(YYINITIAL); return PactTypes.MANAGED_ANN_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 45: 
            { yybegin(YYINITIAL); return PactTypes.INTERFACE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 46: 
            { yybegin(YYINITIAL); return PactTypes.DEF_SCHEMA_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yybegin(YYINITIAL); return PactTypes.IMPLEMENTS_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 48: 
            { yybegin(YYINITIAL); return PactTypes.ENFORCE_ONE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yybegin(YYINITIAL); return PactTypes.WITH_CAPABILITY_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 50: 
            { yybegin(YYINITIAL); return PactTypes.CREATE_USER_GUARD_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 51: 
            { yybegin(YYINITIAL); return PactTypes.STEP_WITH_ROLLBACK_KEYWORD;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
