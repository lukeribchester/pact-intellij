/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.kadena.pact.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.kadena.pact.language.psi.PactTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Pact.flex</tt>
 */
class PactLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\1\22\0\1\3\1\45\1\37\4\45\1\42\1\50\1\51\1\26\1\45"+
    "\1\56\1\17\1\57\1\45\12\41\1\46\1\5\1\45\1\47\2\45\1\35\32\43\1\54\1\40\1"+
    "\55\1\45\1\44\1\0\1\24\1\6\1\16\1\25\1\10\1\13\1\30\1\32\1\20\1\43\1\33\1"+
    "\7\1\21\1\12\1\14\1\22\1\43\1\15\1\11\1\23\1\27\1\36\1\31\1\43\1\34\1\43\1"+
    "\52\1\45\1\53\1\45\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\17\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\3\12\4\1\20\12\4\1\0\1\21"+
    "\1\0\1\22\1\23\1\24\1\4\1\25\14\4\1\26"+
    "\1\4\1\27\5\4\1\21\1\4\1\25\1\30\2\4"+
    "\1\31\7\4\1\32\11\4\1\33\1\34\4\4\1\35"+
    "\4\4\1\36\5\4\1\37\4\4\1\40\6\4\1\41"+
    "\2\4\1\42\3\4\1\43\1\44\1\4\1\45\1\4"+
    "\1\46\5\4\1\47\11\4\1\50\1\51\1\4\1\52"+
    "\3\4\1\53\1\4\1\54\4\4\1\55\1\4\1\56"+
    "\16\4\1\57\3\4\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\140\0\u03f0\0\u0420"+
    "\0\140\0\140\0\140\0\140\0\140\0\140\0\140\0\140"+
    "\0\220\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u01b0\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u03c0\0\140\0\u0870\0\u08a0\0\140\0\140\0\u08d0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u01b0\0\u0b70\0\u01b0\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u03c0\0\u0c90\0\u01b0\0\u01b0"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u01b0\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u01b0\0\u01b0\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u01b0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u01b0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u01b0\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u01b0\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u01b0\0\u14a0\0\u14d0\0\u01b0\0\u1500\0\u1530\0\u1560"+
    "\0\u01b0\0\u01b0\0\u1590\0\u15c0\0\u15f0\0\u01b0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u01b0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u01b0\0\u01b0\0\u18c0"+
    "\0\u01b0\0\u18f0\0\u1920\0\u1950\0\u01b0\0\u1980\0\u01b0\0\u19b0"+
    "\0\u19e0\0\u1a10\0\u1a40\0\u01b0\0\u1a70\0\u01b0\0\u1aa0\0\u1ad0"+
    "\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u01b0\0\u1d40\0\u1d70\0\u1da0"+
    "\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\12\1\14\1\12\1\15\1\16\1\17\1\20"+
    "\1\12\1\21\1\12\1\22\1\12\1\23\3\12\1\24"+
    "\1\12\1\25\1\3\1\26\1\27\3\12\1\30\1\12"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\3\1\4\1\41\1\42\1\41\53\3\61\0\4\4"+
    "\53\0\1\5\1\0\1\43\1\5\1\0\53\5\6\0"+
    "\1\12\1\44\27\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\2\12\1\45\3\12\1\46\7\12\1\47"+
    "\12\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\4\12\1\50\24\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\15\12\1\51\3\12\1\52\7\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\31\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\16\12\1\53"+
    "\12\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\7\12\1\54\21\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\4\12\1\55\1\56\5\12\1\57\15\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\6\12"+
    "\1\60\22\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\7\12\1\61\21\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\7\12\1\62\21\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\2\12\1\63\26\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\3\12"+
    "\1\64\25\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\12\12\1\65\16\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\2\12\1\66\10\12\1\67\3\12"+
    "\1\70\11\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\10\0\37\71\1\72\1\73\17\71\6\0\11\74\1\0"+
    "\6\74\1\0\6\74\1\0\1\74\4\0\1\74\62\0"+
    "\1\75\1\76\11\0\1\4\3\42\55\0\1\43\63\0"+
    "\2\12\1\77\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\15\12\1\100\13\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\16\12\1\101\12\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\13\12\1\102"+
    "\15\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\5\12\1\103\23\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\2\12\1\104\26\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\3\12\1\105\25\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\1\12\1\106"+
    "\27\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\2\12\1\107\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\15\12\1\110\13\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\14\12\1\111\14\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\17\12\1\112"+
    "\11\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\6\12\1\113\22\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\21\12\1\114\4\12\1\115\2\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\5\12\1\116"+
    "\23\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\2\12\1\117\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\15\12\1\120\13\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\30\12\1\121\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\6\12\1\122\7\12"+
    "\1\123\12\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\6\12\1\124\22\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\10\0\37\71\1\125\1\73\17\71\6\0"+
    "\20\74\1\0\6\74\1\0\1\74\2\0\1\74\1\0"+
    "\2\74\21\0\3\12\1\126\25\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\20\12\1\127\10\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\17\12\1\130"+
    "\11\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\1\131\30\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\6\12\1\132\22\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\14\12\1\133\14\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\14\12\1\134\14\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\3\12"+
    "\1\135\25\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\16\12\1\136\12\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\2\12\1\137\26\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\1\12\1\140\27\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\21\12"+
    "\1\141\7\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\22\12\1\142\6\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\2\12\1\143\26\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\3\12\1\144\4\12"+
    "\1\145\3\12\1\146\1\147\3\12\1\150\7\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\24\12\1\151"+
    "\4\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\2\12\1\152\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\17\12\1\153\11\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\4\12\1\154\24\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\10\12\1\155"+
    "\20\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\3\12\1\156\25\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\17\12\1\157\11\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\7\12\1\160\21\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\11\12\1\161"+
    "\17\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\2\12\1\162\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\2\12\1\163\26\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\15\12\1\164\13\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\7\12\1\165"+
    "\21\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\2\12\1\166\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\1\12\1\167\27\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\4\12\1\170\24\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\10\12\1\171"+
    "\20\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\6\12\1\172\7\12\1\173\12\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\16\12\1\174\12\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\16\12\1\175"+
    "\12\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\4\12\1\176\24\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\11\12\1\177\17\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\4\12\1\200\24\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\2\12\1\201"+
    "\26\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\16\12\1\202\12\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\16\12\1\203\12\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\10\12\1\204\20\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\23\12\1\205"+
    "\5\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\4\12\1\206\24\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\2\12\1\207\26\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\5\12\1\210\23\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\13\12\1\211"+
    "\15\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\2\12\1\212\26\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\24\12\1\213\4\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\4\12\1\214\24\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\14\12\1\215"+
    "\14\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\10\12\1\216\20\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\1\217\30\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\10\12\1\220\20\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\15\12\1\221\13\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\1\12"+
    "\1\222\27\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\22\12\1\223\6\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\2\12\1\224\26\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\12\12\1\225\16\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\17\12"+
    "\1\226\11\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\11\12\1\227\17\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\16\12\1\230\12\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\2\12\1\231\26\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\2\12"+
    "\1\232\26\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\3\12\1\233\25\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\15\12\1\234\13\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\1\12\1\235\27\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\16\12"+
    "\1\236\12\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\2\12\1\237\26\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\11\12\1\240\17\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\15\12\1\241\13\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\21\12"+
    "\1\242\7\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\10\12\1\243\20\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\4\12\1\244\24\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\13\12\1\245\15\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\15\12"+
    "\1\246\13\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\2\12\1\247\26\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\14\12\1\250\14\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\17\12\1\251\11\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\6\12"+
    "\1\252\22\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\24\12\1\253\4\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\3\12\1\254\25\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\2\12\1\255\26\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\15\12"+
    "\1\256\13\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\16\12\1\257\12\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\16\12\1\260\12\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\4\12\1\261\24\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\11\12"+
    "\1\262\17\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\2\12\1\263\26\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\3\12\1\264\25\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\1\265\30\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\2\12\1\266"+
    "\26\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\7\12\1\267\21\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\7\12\1\270\21\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\12\12\1\271\16\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\6\12\1\272"+
    "\22\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\11\12\1\273\17\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\1\12\1\274\27\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\1\12\1\275\27\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\22\12\1\276"+
    "\6\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\12\12\1\277\16\12\2\0\1\12\1\0\3\12\1\0"+
    "\1\12\16\0\1\12\1\300\27\12\2\0\1\12\1\0"+
    "\3\12\1\0\1\12\16\0\21\12\1\301\7\12\2\0"+
    "\1\12\1\0\3\12\1\0\1\12\16\0\15\12\1\302"+
    "\13\12\2\0\1\12\1\0\3\12\1\0\1\12\16\0"+
    "\1\303\30\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\16\12\1\304\12\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\26\12\1\305\2\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\16\12\1\306\12\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\16\0\7\12"+
    "\1\307\21\12\2\0\1\12\1\0\3\12\1\0\1\12"+
    "\16\0\10\12\1\310\20\12\2\0\1\12\1\0\3\12"+
    "\1\0\1\12\16\0\17\12\1\311\11\12\2\0\1\12"+
    "\1\0\3\12\1\0\1\12\16\0\25\12\1\312\3\12"+
    "\2\0\1\12\1\0\3\12\1\0\1\12\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\22\1\1\11\2\1\10\11\30\1\1\0"+
    "\1\11\1\0\1\1\2\11\214\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 50: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 51: break;
          case 3: 
            { yybegin(YYINITIAL); return PactTypes.COMMENT;
            } 
            // fall through
          case 52: break;
          case 4: 
            { yybegin(YYINITIAL); return PactTypes.IDENTIFIER;
            } 
            // fall through
          case 53: break;
          case 5: 
            { yybegin(YYINITIAL); return PactTypes.NUMBER;
            } 
            // fall through
          case 54: break;
          case 6: 
            { yybegin(YYINITIAL); return PactTypes.COLON;
            } 
            // fall through
          case 55: break;
          case 7: 
            { yybegin(YYINITIAL); return PactTypes.PAREN_OPEN;
            } 
            // fall through
          case 56: break;
          case 8: 
            { yybegin(YYINITIAL); return PactTypes.PAREN_CLOSE;
            } 
            // fall through
          case 57: break;
          case 9: 
            { yybegin(YYINITIAL); return PactTypes.BRACE_OPEN;
            } 
            // fall through
          case 58: break;
          case 10: 
            { yybegin(YYINITIAL); return PactTypes.BRACE_CLOSE;
            } 
            // fall through
          case 59: break;
          case 11: 
            { yybegin(YYINITIAL); return PactTypes.BRACKET_OPEN;
            } 
            // fall through
          case 60: break;
          case 12: 
            { yybegin(YYINITIAL); return PactTypes.BRACKET_CLOSE;
            } 
            // fall through
          case 61: break;
          case 13: 
            { yybegin(YYINITIAL); return PactTypes.COMMA;
            } 
            // fall through
          case 62: break;
          case 14: 
            { yybegin(YYINITIAL); return PactTypes.DOT;
            } 
            // fall through
          case 63: break;
          case 15: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 16: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_IF;
            } 
            // fall through
          case 65: break;
          case 17: 
            { yybegin(YYINITIAL); return PactTypes.STRING;
            } 
            // fall through
          case 66: break;
          case 18: 
            { yybegin(YYINITIAL); return PactTypes.TICK;
            } 
            // fall through
          case 67: break;
          case 19: 
            { yybegin(YYINITIAL); return PactTypes.DYN_ACC;
            } 
            // fall through
          case 68: break;
          case 20: 
            { yybegin(YYINITIAL); return PactTypes.BIND_ASSIGN;
            } 
            // fall through
          case 69: break;
          case 21: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_LET;
            } 
            // fall through
          case 70: break;
          case 22: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_TRY;
            } 
            // fall through
          case 71: break;
          case 23: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_IMPORT;
            } 
            // fall through
          case 72: break;
          case 24: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_LOAD;
            } 
            // fall through
          case 73: break;
          case 25: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_STEP;
            } 
            // fall through
          case 74: break;
          case 26: 
            { yybegin(YYINITIAL); return PactTypes.TRUE;
            } 
            // fall through
          case 75: break;
          case 27: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DOC_ANNOTATION;
            } 
            // fall through
          case 76: break;
          case 28: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_BLESS;
            } 
            // fall through
          case 77: break;
          case 29: 
            { yybegin(YYINITIAL); return PactTypes.FALSE;
            } 
            // fall through
          case 78: break;
          case 30: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_BLOCK_INTRO;
            } 
            // fall through
          case 79: break;
          case 31: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEFUN;
            } 
            // fall through
          case 80: break;
          case 32: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_LAMBDA;
            } 
            // fall through
          case 81: break;
          case 33: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_MODULE;
            } 
            // fall through
          case 82: break;
          case 34: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_CAP;
            } 
            // fall through
          case 83: break;
          case 35: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_EVENT_ANNOTATION;
            } 
            // fall through
          case 84: break;
          case 36: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_MODEL_ANNOTATION;
            } 
            // fall through
          case 85: break;
          case 37: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_ENFORCE;
            } 
            // fall through
          case 86: break;
          case 38: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_SUSPEND;
            } 
            // fall through
          case 87: break;
          case 39: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_PACT;
            } 
            // fall through
          case 88: break;
          case 40: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_CONST;
            } 
            // fall through
          case 89: break;
          case 41: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_TABLE;
            } 
            // fall through
          case 90: break;
          case 42: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_MANAGED_ANNOTATION;
            } 
            // fall through
          case 91: break;
          case 43: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_INTERFACE;
            } 
            // fall through
          case 92: break;
          case 44: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_DEF_SCHEMA;
            } 
            // fall through
          case 93: break;
          case 45: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_IMPLEMENTS;
            } 
            // fall through
          case 94: break;
          case 46: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_ENFORCE_ONE;
            } 
            // fall through
          case 95: break;
          case 47: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_WITH_CAPABILITY;
            } 
            // fall through
          case 96: break;
          case 48: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_CREATE_USER_GUARD;
            } 
            // fall through
          case 97: break;
          case 49: 
            { yybegin(YYINITIAL); return PactTypes.KEYWORD_STEP_WITH_ROLLBACK;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
